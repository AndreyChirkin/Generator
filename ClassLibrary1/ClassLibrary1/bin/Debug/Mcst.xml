<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mcst</name>
    </assembly>
    <members>
        <member name="T:Mcst.Convertion.BinaryConvertionAlgorithm`1">
            <summary>
            Алгоритм преобразование из/в массив байт (бинарная сериализация/десериализация)
            </summary>
            <typeparam name="ToT">Тип объекта</typeparam>
        </member>
        <member name="M:Mcst.Convertion.BinaryConvertionAlgorithm`1.Direct(System.Byte[])">
            <summary>
            Десериализация из массива байт
            </summary>
            <param name="value">Бинарное представление объекта</param>
            <returns>Значение объекта</returns>
        </member>
        <member name="M:Mcst.Convertion.BinaryConvertionAlgorithm`1.Reverse(`0)">
            <summary>
            Сериализация в массив байт
            </summary>
            <param name="value">Значение объекта</param>
            <returns>Бинарное представление объекта</returns>
        </member>
        <member name="T:Mcst.Convertion.BoolBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования булевого значение в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.BoolBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация булевого значение из бинарного представления
            </summary>
            <param name="array">Бинарное представление булевого значение</param>
            <returns>Булево значение</returns>
        </member>
        <member name="M:Mcst.Convertion.BoolBinaryConvertionAlgorithm.Reverse(System.Boolean)">
            <summary>
            Сериализация булевого значения в бинарное представление
            </summary>
            <param name="value">Булево значение</param>
            <returns>Бинарное представление булевого значение</returns>
        </member>
        <member name="T:Mcst.Convertion.Converter">
            <summary>
            Методы конвертации
            </summary>
        </member>
        <member name="M:Mcst.Convertion.Converter.TryParse``1(System.String,``0@)">
            <summary>
            Выполняет преобразование с использованием метода TryParse
            </summary>
            <typeparam name="TargetT">Конечный тип</typeparam>
            <param name="from">Строковое представление объекта</param>
            <param name="to">Выходной параметр с результатом преобразования</param>
            <returns>Преобразование успешно: true; в противном случае: false</returns>
            <exception cref="T:System.MissingMethodException"/>
        </member>
        <member name="T:Mcst.Convertion.ConverterCollection">
            <summary>
            Набор конвертеров, осуществляющих преобразование между типами
            </summary>
        </member>
        <member name="M:Mcst.Convertion.ConverterCollection.Register``1(``0)">
            <summary>
            Зарегистрировать преобразователь
            </summary>
            <typeparam name="ConverterT">Тип преобразователя</typeparam>
            <param name="converter">Экземпляр преобразователя</param>
        </member>
        <member name="M:Mcst.Convertion.ConverterCollection.Get``1">
            <summary>
            Извлечь преобразователь
            </summary>
            <typeparam name="ConverterT">Тип преобразователя</typeparam>
            <returns>Экземпляр преобразователя</returns>
        </member>
        <member name="T:Mcst.Convertion.DateTimeBinaryConvertionAlgorithm">
            <summary>
            Ввод/вывод значения поля даты/времени в массив байтов
            </summary>
        </member>
        <member name="M:Mcst.Convertion.DateTimeBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация даты/времени из бинарного представления
            </summary>
            <param name="array">Бинарное представление даты/времени</param>
            <returns>Дата/время</returns>
        </member>
        <member name="M:Mcst.Convertion.DateTimeBinaryConvertionAlgorithm.Reverse(System.DateTime)">
            <summary>
            Сериализация даты/времени в бинарное представление
            </summary>
            <param name="value">Дата/время</param>
            <returns>Бинарное представление даты/времени</returns>
        </member>
        <member name="T:Mcst.Convertion.DecimalBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования десятичного числа в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.DecimalBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация десятичного числа из бинарного представления
            </summary>
            <param name="array">Массив байтов</param>
            <returns>Значение числа</returns>
        </member>
        <member name="M:Mcst.Convertion.DecimalBinaryConvertionAlgorithm.Reverse(System.Decimal)">
            <summary>
            Декомпозиция десятичного числа в массив байтов
            </summary>
            <param name="value">Значение числа</param>
            <returns>Массив байтов</returns>
        </member>
        <member name="T:Mcst.Convertion.DoubleBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования числа с плавающей точкой двойной точности в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.DoubleBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация числа из бинарного представления
            </summary>
            <param name="array">Бинарное представление числа</param>
            <returns>Число</returns>
        </member>
        <member name="M:Mcst.Convertion.DoubleBinaryConvertionAlgorithm.Reverse(System.Double)">
            <summary>
            Сериализация числа в бинарное представление
            </summary>
            <param name="value">Число</param>
            <returns>Бинарное представление числа</returns>
        </member>
        <member name="T:Mcst.Convertion.EmptyBinaryConvertionAlgorithm">
            <summary>
            Пустое преобразование
            </summary>
        </member>
        <member name="M:Mcst.Convertion.EmptyBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Возврат полученного массива байтов
            </summary>
            <param name="value">Массив байтов</param>
            <returns>Массив байтов</returns>
        </member>
        <member name="M:Mcst.Convertion.EmptyBinaryConvertionAlgorithm.Reverse(System.Byte[])">
            <summary>
            Возврат полученного массива байтов
            </summary>
            <param name="array">Массив байтов</param>
            <returns>Массив байтов</returns>
        </member>
        <member name="T:Mcst.Convertion.EmptyConvertionAlgorithm`1">
            <summary>
            Пустое преобразование
            </summary>
        </member>
        <member name="M:Mcst.Convertion.EmptyConvertionAlgorithm`1.Direct(`0)">
            <summary>
            Возврат полученного значение
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Convertion.EmptyConvertionAlgorithm`1.Reverse(`0)">
            <summary>
            Возврат полученного значения
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Mcst.Convertion.EmptyConvertionAlgorithm`1.Instance">
            <summary>
            Создает экземпляр пустого преобразователя
            </summary>
        </member>
        <member name="T:Mcst.Convertion.TimeSpanDaysToDecimalConvertionAlgorithm">
            <summary>
            Выполняет преобразование из десятичного числа, представляющего кол-во дней, во временной интервал
            </summary>
        </member>
        <member name="M:Mcst.Convertion.TimeSpanDaysToDecimalConvertionAlgorithm.Direct(System.Nullable{System.Decimal})">
            <summary>
            Преобразование из десятичного числа во временной интервал
            </summary>
            <param name="value">Число дней</param>
            <returns>Интервал</returns>
        </member>
        <member name="M:Mcst.Convertion.TimeSpanDaysToDecimalConvertionAlgorithm.Reverse(System.TimeSpan)">
            <summary>
            Преобразование из интервала в число дней
            </summary>
            <param name="value">Интервал</param>
            <returns>Число дней</returns>
        </member>
        <member name="T:Mcst.Convertion.MultiValuedEnumConvertionAlgorithm`1">
            <summary>
            Выполняет преобразование из последовательности строк в перечисление указанного типа и обратно.
            Перечисление должно иметь аттрибут Flags.
            </summary>
            <typeparam name="EnumT">Тип перечисления</typeparam>
        </member>
        <member name="M:Mcst.Convertion.MultiValuedEnumConvertionAlgorithm`1.Direct(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Преобразование из последовательности строк в пеерчисление. Если перечисление не помечено аттрибутом [Flags], последовательность должна содержать ровно один элемент
            </summary>
            <param name="value">Последовательность строк</param>
            <returns>Перечисление</returns>
        </member>
        <member name="M:Mcst.Convertion.MultiValuedEnumConvertionAlgorithm`1.Reverse(`0)">
            <summary>
            Преобразование из перечисления в последовательность строк
            </summary>
            <param name="value">Перечисление</param>
            <returns>Последовательность строк</returns>
        </member>
        <member name="T:Mcst.Convertion.EnumConvertionAlgorithm`1">
            <summary>
            Выполняет преобразование из строки в перечисление указанного типа и обратно, используя аттрибут EnumString
            </summary>
            <typeparam name="EnumT">Тип перечисления</typeparam>
        </member>
        <member name="M:Mcst.Convertion.EnumConvertionAlgorithm`1.Direct(System.String)">
            <summary>
            Преобразование из строки в пеерчисление
            </summary>
            <param name="value">Строка</param>
            <returns>Перечисление</returns>
        </member>
        <member name="M:Mcst.Convertion.EnumConvertionAlgorithm`1.Reverse(`0)">
            <summary>
            Преобразование из перечисления в строку значения
            </summary>
            <param name="value">Перечисление</param>
            <returns>Строка</returns>
        </member>
        <member name="T:Mcst.Convertion.EnumStringAttribute">
            <summary>
            Аттрибут для указания текстового значения перечислителя
            </summary>
        </member>
        <member name="M:Mcst.Convertion.EnumStringAttribute.#ctor(System.String)">
            <summary>
            Создает аттрибут с указанным значением перечислителя
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Mcst.Convertion.EnumStringAttribute.Value">
            <summary>
            Текстовое значение перечислителя
            </summary>
        </member>
        <member name="T:Mcst.Convertion.FloatBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования числа с плавающей точкой одинарное точности в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.FloatBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация числа из бинарного представления
            </summary>
            <param name="array">Число</param>
            <returns>Бинарное представление числа</returns>
        </member>
        <member name="M:Mcst.Convertion.FloatBinaryConvertionAlgorithm.Reverse(System.Single)">
            <summary>
            Сериализация чила в бинарное представление
            </summary>
            <param name="value">Бинарное представление числа</param>
            <returns>Число</returns>
        </member>
        <member name="T:Mcst.Convertion.GuidBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразование уникального идентификатора в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.GuidBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация  из бинарного представления
            </summary>
            <param name="array">Бинарное представление уникального идентификатора</param>
            <returns>Уникальный илентификатор</returns>
        </member>
        <member name="M:Mcst.Convertion.GuidBinaryConvertionAlgorithm.Reverse(System.Guid)">
            <summary>
            Сериализация уникального идентификатора в бинарное представление
            </summary>
            <param name="value">Уникальный илентификатор</param>
            <returns>Бинарное представление уникального идентификатора</returns>
        </member>
        <member name="T:Mcst.Convertion.IConvertionAlgorithm`2">
            <summary>
            Алгоритм преобразования между двумя типами
            </summary>
        </member>
        <member name="M:Mcst.Convertion.IConvertionAlgorithm`2.Direct(`0)">
            <summary>
            Прямое преобразование
            </summary>
            <param name="value">Значение исходного типа</param>
            <returns>Значение конечного типа</returns>
        </member>
        <member name="M:Mcst.Convertion.IConvertionAlgorithm`2.Reverse(`1)">
            <summary>
            Обратное преобразование
            </summary>
            <param name="value">Значение конечного типа</param>
            <returns>Значение исходного типа</returns>
        </member>
        <member name="T:Mcst.Convertion.IntBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования целого 32-х разрядного числа со знаком из/в двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.IntBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация числа из бинарного представления
            </summary>
            <param name="array">Бинарное представление числа</param>
            <returns>Число</returns>
        </member>
        <member name="M:Mcst.Convertion.IntBinaryConvertionAlgorithm.Reverse(System.Int32)">
            <summary>
            Сериализация числа в бинарное представление
            </summary>
            <param name="value">Число</param>
            <returns>Бинарное представление числа</returns>
        </member>
        <member name="T:Mcst.Convertion.LongBinaryTransformator">
            <summary>
            Алгоритм преобразования целого 64-х разрядного числа со знаком в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.LongBinaryTransformator.Direct(System.Byte[])">
            <summary>
            Десериализация числа из бинарного представления
            </summary>
            <param name="array">Бинарное представление числа</param>
            <returns>Число</returns>
        </member>
        <member name="M:Mcst.Convertion.LongBinaryTransformator.Reverse(System.Int64)">
            <summary>
            Сериализация числа в бинарное представление
            </summary>
            <param name="value">Число</param>
            <returns>Бинарное представление числа</returns>
        </member>
        <member name="T:Mcst.Convertion.ShortBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразования целого 16-разрядного числа со знаком в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.ShortBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация числа из бинарного представления
            </summary>
            <param name="array">Бинарное представление числа</param>
            <returns>Число</returns>
        </member>
        <member name="M:Mcst.Convertion.ShortBinaryConvertionAlgorithm.Reverse(System.Int16)">
            <summary>
            Сериализация числа в бинарное представление
            </summary>
            <param name="value">Число</param>
            <returns>Бинарное представление числа</returns>
        </member>
        <member name="T:Mcst.Convertion.StringBinaryConvertionAlgorithm">
            <summary>
            Алгоритм преобразование строки в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.StringBinaryConvertionAlgorithm.Direct(System.Byte[])">
            <summary>
            Десериализация строки из бинарного представления
            </summary>
            <param name="array">Бинарное представление строки</param>
            <returns>Строка</returns>
        </member>
        <member name="M:Mcst.Convertion.StringBinaryConvertionAlgorithm.Reverse(System.String)">
            <summary>
            Сериализация строки в бинарное представление
            </summary>
            <param name="value">Строка</param>
            <returns>Бинарное представление </returns>
        </member>
        <member name="T:Mcst.Convertion.StringEnumToDayOfWeekConvertionAlgorithm">
            <summary>
            Алгоритм преобразования дня недели в/из строкового представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.StringEnumToDayOfWeekConvertionAlgorithm.Direct(System.String)">
            <summary>
            Преобразование из строки в перечисление System.DayOfWeek
            </summary>
            <param name="value">Строковое представление дня недели</param>
            <returns>Перечисление</returns>
        </member>
        <member name="M:Mcst.Convertion.StringEnumToDayOfWeekConvertionAlgorithm.Reverse(System.DayOfWeek)">
            <summary>
            Преобразование перечисления System.DayOfWeek в строковое представление
            </summary>
            <param name="value">Перечисление</param>
            <returns>Строковое представление дня недели</returns>
        </member>
        <member name="T:Mcst.Convertion.StringToDateTimeConvertionAlgorithm">
            <summary>
            Алгоритм преобразование времени в/из строкового представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.StringToDateTimeConvertionAlgorithm.Direct(System.String)">
            <summary>
            Преобразование даты/времени из строкового представления
            </summary>
            <param name="value">Строковое представление даты/времени</param>
            <returns>Дата/время</returns>
        </member>
        <member name="M:Mcst.Convertion.StringToDateTimeConvertionAlgorithm.Reverse(System.DateTime)">
            <summary>
            Преобразование времени в строковое представление
            </summary>
            <param name="value">Дата/время</param>
            <returns>Строка со временем</returns>
        </member>
        <member name="T:Mcst.Convertion.TimeSpanBinaryTransformator">
            <summary>
            Алгоритм преобразования временного интервала в/из двоичного представления
            </summary>
        </member>
        <member name="M:Mcst.Convertion.TimeSpanBinaryTransformator.Direct(System.Byte[])">
            <summary>
            Десериализация временного интервала из бинарного представления
            </summary>
            <param name="array">Бинарное представление временного интервала</param>
            <returns>Временной интервал</returns>
        </member>
        <member name="M:Mcst.Convertion.TimeSpanBinaryTransformator.Reverse(System.TimeSpan)">
            <summary>
            Сериализация временного интервала в бинарное представление
            </summary>
            <param name="value">Временной интервал</param>
            <returns>Бинарное представление временного интервала</returns>
        </member>
        <member name="T:Mcst.Exceptions.McstExceptionExtensions">
            <summary>
            Расширение класса исключений
            </summary>
        </member>
        <member name="M:Mcst.Exceptions.McstExceptionExtensions.GetDetailedLogView(System.Exception)">
            <summary>
            Получить представление для логгирования исключения
            </summary>
            <param name="exception">Объект исключения</param>
            <returns>Текстовое представление исключения для записи в лог</returns>
        </member>
        <member name="T:Mcst.Extensions.ByteArrayExtensions">
            <summary>
            Расширения массива байт
            </summary>
        </member>
        <member name="M:Mcst.Extensions.ByteArrayExtensions.ToObject(System.Byte[])">
            <summary>
            Выполняет десериализацию массива байт в объект
            </summary>
            <param name="array">Массив байт</param>
            <returns>Объект</returns>
        </member>
        <member name="T:Mcst.Extensions.DayOfWeekExtensions">
            <summary>
            Расширения перечисления DayOfWeek
            </summary>
        </member>
        <member name="M:Mcst.Extensions.DayOfWeekExtensions.ToRussian(System.DayOfWeek)">
            <summary>
            Возвращает название дня недели на руссом языке
            </summary>
            <param name="target">Целевой объект</param>
            <returns>Название дня недели на русском языке</returns>
        </member>
        <member name="T:Mcst.Extensions.ExceptionExtensions">
            <summary>
            Расширение класса исключений
            </summary>
        </member>
        <member name="M:Mcst.Extensions.ExceptionExtensions.GetDetailedLogView(System.Exception)">
            <summary>
            Получить представление для логгирования исключения
            </summary>
            <param name="exception">Объект исключения</param>
            <returns>Текстовое представление исключения для записи в лог</returns>
        </member>
        <member name="M:Mcst.Extensions.ExceptionExtensions.Swallow(System.Action)">
            <summary>
            Выполнить действие, игнорируя все возникшие исключения
            </summary>
            <param name="action">Действие для запуска</param>
        </member>
        <member name="M:Mcst.Extensions.ExceptionExtensions.Swallow``1(System.Action)">
            <summary>
            Выполнить действие, игнорируя возникшие исключения указанного типа или унаследованные от него
            </summary>
            <typeparam name="TException">Базовый тип игнорируемого исключения</typeparam>
            <param name="action">Действие для запуска</param>
        </member>
        <member name="T:Mcst.Extensions.IConvertibleExtensions">
            <summary>
            Расширения типов, реализующих интерфейс System.IConvertible
            </summary>
        </member>
        <member name="M:Mcst.Extensions.IConvertibleExtensions.IsBitSet``1(``0,System.Int32)">
            <summary>
            Проверка бита в указанном разряде в двоичном представлении числа
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="target">Объект</param>
            <param name="position">Индекс разряда (0 - младший)</param>
            <returns>Указанный разряд равен 1: true; в противном случае: false</returns>
        </member>
        <member name="T:Mcst.Extensions.ObjectExtensions">
            <summary>
            Расширения всех объектов
            </summary>
        </member>
        <member name="M:Mcst.Extensions.ObjectExtensions.ToByteArray(System.Object)">
            <summary>
            Преобразовать объект в последовательность байт с помощью двоичного форматирования по-умолчанию
            </summary>
            <param name="target">Преобразовываемый объект</param>
            <returns>Массив байт, являющийся двоичным представлением исходного объекта</returns>
        </member>
        <member name="T:Mcst.Extensions.StringExtensions">
            <summary>
            Расширения класса System.String
            </summary>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Преобразовать значение перечисления из его строкового представления
            </summary>
            <typeparam name="T">Тип перечислениея</typeparam>
            <param name="target">Строковое представление перечисления</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.OverflowException"/>
            <returns>Значение перечисления</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.ToEnum``1(System.String,``0@)">
            <summary>
            Преобразовать значение перечисления из его строкового представления
            </summary>
            <typeparam name="T">Тип перечислениея</typeparam>
            <param name="target">Строковое представление перечисления</param>
            <param name="value">Значение перечисления</param>
            <exception cref="T:System.ArgumentException"/>
            <returns>Преобразование прошло успешно: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.ToEnum``1(System.String,``0)">
            <summary>
            Преобразовать значение перечисления из его строкового представления
            </summary>
            <typeparam name="T">Тип перечислениея</typeparam>
            <param name="target">Строковое представление перечисления</param>
            <param name="defaultValue">Значение по-умолчанию</param>
            <exception cref="T:System.ArgumentException"/>
            <returns>Значение перечисления</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.ToFileName(System.String)">
            <summary>
            Удаляет недопустимы для имен файлов символы
            </summary>
            <param name="target">Исходная строка</param>
            <returns>Отфильтрованная строка</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.Carry(System.String,System.Int32,System.Int32)">
            <summary>
            Разбивает однострочный текст на несколько строк без разрыва слов
            </summary>
            <param name="target">Исходная строка</param>
            <param name="width">Максимальная ширина строки</param>
            <param name="spacing">Отступ от начала строки</param>
            <returns>Многострочный текст</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.Carry(System.String,System.Int32)">
            <summary>
            Разбивает однострочный текст на несколько строк без разрыва слов
            </summary>
            <param name="target">Исходная строка</param>
            <param name="width">Максимальная ширина строки</param>
            <returns>Многострочный текст</returns>
        </member>
        <member name="M:Mcst.Extensions.StringExtensions.Carry(System.String)">
            <summary>
            Разбивает однострочный текст на несколько строк без разрыва слов
            </summary>
            <param name="target">Исходная строка</param>
            <returns>Многострочный текст</returns>
        </member>
        <member name="T:Mcst.Extensions.TypeExtensions">
            <summary>
            Расширения типа System.Type
            </summary>
        </member>
        <member name="M:Mcst.Extensions.TypeExtensions.IsInheritedFrom(System.Type,System.Type)">
            <summary>
            Проверяет является ли указанный тип базовым типом для текущего типа
            </summary>
            <param name="targetType">Текущий тип</param>
            <param name="baseType">Предполагаемый базовый тип</param>
            <returns>Предполагаемый базовый тип является базовым классом для текущего типа: true; иначе: false</returns>
        </member>
        <member name="T:Mcst.Helpers.LambdaComparer`1">
            <summary>
            Компаратор на основе лямбда-выражений
            </summary>
            <typeparam name="T">Тип сравниваемых элементов</typeparam>
        </member>
        <member name="M:Mcst.Helpers.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Создает компаратор, используя в качестве предиката и хэш-фунцкии лямбда-выражения
            </summary>
            <param name="predicate">Предикат, используемый для проверки на равенство</param>
            <param name="hash">Хэш-функция</param>
        </member>
        <member name="M:Mcst.Helpers.LambdaComparer`1.Equals(`0,`0)">
            <summary>
            Проверяет два элемента на равенство, используя предикат
            </summary>
            <param name="x">Первый элемент</param>
            <param name="y">Второй элемент</param>
            <returns>Значение предиката</returns>
        </member>
        <member name="M:Mcst.Helpers.LambdaComparer`1.GetHashCode(`0)">
            <summary>
            Вычисляет хэш объекта с использованием хэш-функции
            </summary>
            <param name="obj">Объект</param>
            <returns>Значение хэш-функции</returns>
        </member>
        <member name="M:Mcst.Helpers.LambdaComparer`1.Create(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Создает компаратор, используя в качестве предиката и хэш-фунцкии лямбда-выражения
            </summary>
            <param name="predicate">Предикат, используемый для проверки на равенство</param>
            <param name="hash">Хэш-функция</param>
            <returns>Компаратор</returns>
        </member>
        <member name="M:Mcst.Helpers.LambdaComparer`1.Create(System.Func{`0,`0,System.Boolean})">
            <summary>
            Создает компаратор, используя в качестве предиката лямбда-выражение. В качестве хэша используется постоянное значение
            </summary>
            <param name="predicate">Предикат, используемый для проверки на равенство</param>
            <returns>Компаратор</returns>
        </member>
        <member name="T:Mcst.Helpers.Collection">
            <summary>
            Объединяет методы для создания списков
            </summary>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <param name="e7"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateList``1(``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <param name="e7"></param>
            <param name="e8"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <param name="e7"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.CreateArray``1(``0,``0,``0,``0,``0,``0,``0,``0)">
            <summary>
            Создает список из явного перечня элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="e3"></param>
            <param name="e4"></param>
            <param name="e5"></param>
            <param name="e6"></param>
            <param name="e7"></param>
            <param name="e8"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Выполняет итерацию по всей последовательности выполняя указанное действие над каждым элементов
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence"></param>
            <param name="action"></param>
        </member>
        <member name="M:Mcst.Helpers.Collection.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Action{``0,``1})">
            <summary>
            Выполняет итерацию по двум коллекциям выполняя указанное действие над каждой парой элементов
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="sequence1"></param>
            <param name="sequence2"></param>
            <param name="action"></param>
        </member>
        <member name="M:Mcst.Helpers.Collection.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Преобразует элементы последовательности с использованием указанной функции отображения
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sequence"></param>
            <param name="mapFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.Map``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Преобразует все последовательные пары элементов двух последовательностей с использованием указанной функции отображения
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sequence1"></param>
            <param name="sequence2"></param>
            <param name="mapFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Проверяет, возвращает указанный предикат истину хотя бы для одного элемента коллекции
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="sequence"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.Any``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Проверяет, возвращает указанный предикат истину хотя бы для одной последовательной пары элементов двух коллекций
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="sequence1"></param>
            <param name="sequence2"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Helpers.Collection.Iterate``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Выполняет обход двух коллекций, возвращая все последовательные пары элементов
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="sequence1"></param>
            <param name="sequence2"></param>
            <returns></returns>
        </member>
        <member name="T:Mcst.Model.Storage.IRepository`1">
            <summary>
            Репозиторий, предоставляющий доступ к некоторому хранилищу, используя интерфейс коллекции
            </summary>
            <typeparam name="TUnitOfWork">Конечный тип единицы работы</typeparam>
        </member>
        <member name="P:Mcst.Model.Storage.IRepository`1.UnitOfWork">
            <summary>
            Единица работы, из которой был создан репозиторий
            </summary>
        </member>
        <member name="T:Mcst.Model.Storage.IRepository`2">
            <summary>
            Репозиторий, предоставляющий доступ к некоторому хранилищу, используя интерфейс коллекции
            </summary>
            <typeparam name="TUnitOfWork">Конечный тип единицы работы</typeparam>
            <typeparam name="TEntiry">Тип сущности</typeparam>
        </member>
        <member name="T:Mcst.Model.Storage.IRepository`3">
            <summary>
            Репозиторий, предоставляющий доступ к некоторому хранилищу, используя интерфейс коллекции
            </summary>
            <typeparam name="TUnitOfWork">Конечный тип единицы работы</typeparam>
            <typeparam name="TEntity">Тип сущности</typeparam>
            <typeparam name="TKey">Тип ключа</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.IRepository`3.Contains(`2)">
            <summary>
            Хранилище содержит сущность с указанным ключом
            </summary>
            <param name="key">Ключ</param>
            <returns>Хранилище содержит сущность: true; иначе - false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IRepository`3.Get(`2)">
            <summary>
            Извлекает сущность из хранилища по ключу
            </summary>
            <param name="key">Значение ключа</param>
            <returns>Сущность</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IRepository`3.GetKey(`1)">
            <summary>
            Извлекает ключ сущности
            </summary>
            <param name="value">Сущность</param>
            <returns>Значение ключа сущности</returns>
        </member>
        <member name="T:Mcst.Model.Storage.Repository`3">
            <summary>
            Абстрактный репозиторий на основе двух отображений: { ключ -> значение, значение -> ключ }
            </summary>
            <typeparam name="TUnitOfWork">Тип единицы работы, с которой связан репозиторий</typeparam>
            <typeparam name="TObject">Тип объектов, хранящихся в репозитории</typeparam>
            <typeparam name="TKey">Тип ключа объектов</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.#ctor(`0)">
            <summary>
            Создает репозиторий в указанной единице работы
            </summary>
            <param name="unitOfWork">Единица работы</param>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.Count">
            <summary>
            Число объектов в репозитории
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.IsReadOnly">
            <summary>
            Репозиторий доступен на чтение и запись
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.IsSynchronized">
            <summary>
            Репозиторий потокобезопасен
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.Keys">
            <summary>
            Все ключи в репозитории
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.SyncRoot">
            <summary>
            Объект для предотвращения модификации репозитория на время чтения
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.UnitOfWork">
            <summary>
            Единица работы
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.Repository`3.Values">
            <summary>
            Все объекты в репозитории
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnObjectRequest(`2)">
            <summary>
            Вызывается при запросе объекта по ключу, в случае отсутствия ключа в кэше репозитория. Реализация должна загрузить объект и его ключ в кэш. В противном случае сгенерируется исключение
            </summary>
            <param name="key">Ключ запрошенного объекта</param>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnKeyRequest(`1)">
            <summary>
            Вызывается при запросе ключа объекта, в случае отсутствия объекта в кэше репозитория. Реализация должна загрузить объект и его ключ в кэш. В противном случае сгенерируется исключение
            </summary>
            <param name="value">Объект, ключ которого был запрошен</param>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnObjectsRequest">
            <summary>
            Вызывается каждый раз при создании перечислителя объектов или ключей. Служит для загрузки всех объектов из низлежащего хранилища
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnInsert(`1)">
            <summary>
            Вызывается при вставке в репозиторий. Служит для добавления информации об объекте в низлежащем хранилище
            </summary>
            <param name="value">Новый объект</param>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnRemove(`1)">
            <summary>
            Вызывается при удалении объекта из репозитория. Служит для удаления информации об объекте из низлежащего хранилища
            </summary>
            <param name="value">Удаляемый объект</param>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.OnSave">
            <summary>
            Вызывается при сохранении работы
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.Repository`3.Cache(`1,`2)">
            <summary>
            Кэширует объект с указанным ключом
            </summary>
            <param name="value">Объект</param>
            <param name="key">Ключ</param>
        </member>
        <member name="T:Mcst.Model.Storage.UnitOfWork`1">
            <summary>
            Единица работы
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.UnitOfWork`1.GetEnumerator">
            <summary>
            Возвращает перечислитель репозиториев
            </summary>
            <returns>Перечислитель репозиториев</returns>
        </member>
        <member name="P:Mcst.Model.Storage.UnitOfWork`1.Count">
            <summary>
            Число поддерживаемых репозиториев
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.UnitOfWork`1.GetRepository``1">
            <summary>
            Запрашивает репозиторий указанного типа
            </summary>
            <typeparam name="TRepository">Тип репозитория</typeparam>
            <returns>Запрошенный репозиторий</returns>
        </member>
        <member name="M:Mcst.Model.Storage.UnitOfWork`1.GetRepositoryFor``2">
            <summary>
            Запрашивает репозиторий объектов указанного типа
            </summary>
            <typeparam name="TValue">Тип объектов, хранящихся в репозитории</typeparam>
            <typeparam name="TKey">Тип ключа репозитория</typeparam>
            <returns>Запрошенны репозиторий</returns>
        </member>
        <member name="M:Mcst.Model.Storage.UnitOfWork`1.GetRepositoryFor``1">
            <summary>
            Запрашивает репозиторий объектов указанного типа
            </summary>
            <typeparam name="TValue">Тип объектов, хранящихся в репозитории</typeparam>
            <returns>Запрошенны репозиторий</returns>
        </member>
        <member name="T:Mcst.Model.Storage.IFactory">
            <summary>
            Фабрика объектов АСУП МЦСТ
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetProjects(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetTasks(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetAssignments(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetLinks(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetNotes(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetEmployees(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetProject(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetTask(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetAssignment(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetLink(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetNote(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetEmployee(Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetObject(System.Type,Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.GetCollection(System.Type,Mcst.Model.IMcstModel)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mcst.Model.Storage.IFactory.ResolveType``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Mcst.Model.Storage.IStorage">
            <summary>
            Хранилище
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.Initialize(Mcst.Model.IMcstModel)">
            <summary>
            Вызывается моделью при добавлении хранилища к ней
            </summary>
            <param name="model">Объект модели</param>
        </member>
        <member name="P:Mcst.Model.Storage.IStorage.Metadata">
            <summary>
            Метаданные, используемые хранилищем
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.GetPropertyValue``2(``0,System.Reflection.PropertyInfo)">
            <summary>
            Получить значение свойства указанного объекта
            </summary>
            <typeparam name="TObject">Тип целевого объекта</typeparam>
            <typeparam name="TValue">Тип значения свойства</typeparam>
            <param name="target">Целевой объект</param>
            <param name="property">Свойство</param>
            <returns>Значение свойства</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.SetPropertyValue``2(``0,System.Reflection.PropertyInfo,``1)">
            <summary>
            Задать значение свойства указанного объекта. Применимо только если IsPropertySupported&lt;TargetT>(property) вернула true
            </summary>
            <typeparam name="TObject">Тип целевого объекта</typeparam>
            <typeparam name="TValue">Тип свойства</typeparam>
            <param name="target">Целевой объект</param>
            <param name="property">Свойство</param>
            <param name="value">Новое значение свойства</param>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterSubobject``2(``0,System.Reflection.PropertyInfo,``1)">
            <summary>
            Зарегистрировать созданный подобъект. Метод вызывается контекстом, когда пользователь
            запрашивает значение свойства, типом которого является элемент объектной модели АСУП.
            Применимо, если Supported&lt;TargetT> и Supported&lt;SubobjectT> обе вернули true
            </summary>
            <typeparam name="TObject">Тип целевого объекта</typeparam>
            <typeparam name="TSubobject">Тип регистрируемого подобъекта</typeparam>
            <param name="target">Целевой объект</param>
            <param name="property">Свойство, связанное с подобъектом</param>
            <param name="subobject">Подобъект</param>
            <returns>Иднтификатор подобъекта, полученный из внешнего источника, связанного с хранилищем</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.TryGetSubobject``2(``0,System.Reflection.PropertyInfo,``1@)">
            <summary>
            Извлечь зарегистрированный ранее подобъект. Если этот метод вернул true, контекстом будет вызван
            метод регистрации подобъекта
            </summary>
            <typeparam name="TObject">Тип целевого объекта</typeparam>
            <typeparam name="TSubobject">Тип регистрируемого подобъекта</typeparam>
            <param name="target">Целевой объект</param>
            <param name="property">Свойство, связанное с подобъектом</param>
            <param name="subobject">Подобъект</param>
            <returns>Подобъект был корректно зарегистрирован: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterSequence``2(``0,System.Reflection.PropertyInfo,Mcst.Model.ISequence{``1})">
            <summary>
            Зарегистрировать созданную подпоследовательностьМетод вызывается контекстом, когда пользователь
            запрашивает значение свойства, типом которого является коллекция элементов объектной модели АСУП.
            </summary>
            <typeparam name="TObject">Тип целевого объекта</typeparam>
            <typeparam name="TElement">Тип элемента регистрируемой последовательности</typeparam>
            <param name="target">Целевой объект</param>
            <param name="property">Свойство целевого объекта, связанное с регистрируемой последовательностью</param>
            <param name="sequence">Целевая последовательность</param>
            <returns>Число элементов подпоследовательности, полученное из внешнего источника, связанного с хранилищем</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterProjects(Mcst.Model.ISequence{Mcst.Model.IProject})">
            <summary>
            Регистрация списка проектов
            </summary>
            <param name="projects">Целевая последовательность</param>
            <returns>Число проектов</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterEmployees(Mcst.Model.ISequence{Mcst.Model.IEmployee})">
            <summary>
            Регистрация списка сотрудников
            </summary>
            <param name="employees">Целевая последовательность</param>
            <returns>Число сотрудников</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterSequenceElements``1(Mcst.Model.ISequence{``0},``0[])">
            <summary>
            Зарегистрировать содержимое подпоследовательности
            </summary>
            <typeparam name="ElementT">Тип элемента регистрируемой последовательности</typeparam>
            <param name="sequence">Регистрируемая последовательность</param>
            <param name="elements">Элементы регистрируемой последовательности</param>
            <returns>Последовательность идентификаторов элементов регистрируемой последовательности</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.TryGetObject``1(System.Guid,``0@)">
            <summary>
            Пытается извлечь объект из хранилища
            </summary>
            <typeparam name="TObject">Тип извлекаемого подобъекта</typeparam>
            <param name="id">Идентификатор объекта</param>
            <param name="result">Существующий в хранилище объект</param>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.ReplaceObject``1(``0,``0)">
            <summary>
            Заменяет зарегистрированный ранее объект АСУП на новый. 
            Метод вызывается при одновременной работе с несколькими хранилищами, если
            извлеченный объект уже был ранее извлечен другим путем в одном из них. Тогда метод вызывается
            для всех остальных хранилищ (из которых он извлекается впервые), во избежание потери внесенных
            изменений
            </summary>
            <typeparam name="TObject">Тип заменяемого объекта</typeparam>
            <param name="old">Заменяемый объект</param>
            <param name="new">Объект, на который осуществляется замена</param>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.EnumerateSequence``1(Mcst.Model.ISequence{``0})">
            <summary>
            Получить перечисление для зарегистрированноей ранее коллекции
            </summary>
            <typeparam name="TElement">Тип элемента целевой последовательности</typeparam>
            <param name="sequence">Целевая последовательность</param>
            <returns>Перечисление элементов последовательности</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.GetByGuid``1(Mcst.Model.ISequence{``0},System.Guid)">
            <summary>
            Получить элемент по идентификатору из зарегистрированной ранее коллекции
            </summary>
            <typeparam name="TElement">Тип элемента целевой последовательности</typeparam>
            <param name="sequence">Целевая последовательность</param>
            <param name="id">Идентификатор элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.TryGetEmployee(System.String,Mcst.Model.IEmployee@)">
            <summary>
            Получить сотрудника по имени входа
            </summary>
            <param name="loginName">Имя входа</param>
            <param name="employee">Сотрудник</param>
            <returns>Операция успешна: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.IStorage.RegisterEmployee(Mcst.Model.IEmployee,System.String)">
            <summary>
            Зарегистрировать сотрудника с указанным именем входа
            </summary>
            <param name="employee">Новый объект сотрудника</param>
            <param name="loginName">Имя входа, с которым следует ассоциировать объект сотрудника</param>
            <returns>Идентификатор сотрудника</returns>
        </member>
        <member name="T:Mcst.Model.Storage.McstObjectDescriptor`1">
            <summary>
            Дескриптор объекта МЦСТ
            </summary>
            <typeparam name="TObject">Тип объекта МЦСТ</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.#ctor">
            <summary>
            Создает дескриптор объекта
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.Check``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Определяет имеются ли у свойства признаки
            </summary>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <returns>У свойства имеются признаки: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.AddTrait``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Добавляет признак к свойству
            </summary>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.AddValue``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,``1)">
            <summary>
            Добавляет значение к признаку
            </summary>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.CheckTrait``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Проверяет наличие признака у свойства
            </summary>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
            <returns>Признак существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.CheckValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
            <summary>
            Проверяет наличие значение у признака свойства
            </summary>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor`1.GetValue``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
            <summary>
            Получает значение признака
            </summary>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <typeparam name="TValue">Тип значения признака</typeparam>
            <param name="propertySelector">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="T:Mcst.Model.Storage.McstObjectDescriptor">
            <summary>
            Дескриптор объекта МЦСТ
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.#ctor(System.Type)">
            <summary>
            Создает дескриптор объекта
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.Check(System.String)">
            <summary>
            Определяет имеются ли у свойства признаки
            </summary>
            <param name="propertyName">Имя свойства</param>
            <returns>У свойства имеются признаки: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.Check(System.Reflection.PropertyInfo)">
            <summary>
            Определяет имеются ли у свойства признаки
            </summary>
            <param name="property">Свойство</param>
            <returns>У свойства имеются признаки: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddTrait(System.String,System.String)">
            <summary>
            Добавляет признак к свойству
            </summary>
            <param name="propertyName">Имя свойства</param>
            <param name="name">Имя признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddTrait(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Добавляет признак к свойству
            </summary>
            <param name="property">Свойство</param>
            <param name="name">Имя признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddTrait(System.String)">
            <summary>
            Добавляет признак типа
            </summary>
            <param name="name">Имя признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddValue``1(System.String,System.String,System.String,``0)">
            <summary>
            Добавляет значение к признаку
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="propertyName">Имя свойства</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddValue``1(System.Reflection.PropertyInfo,System.String,System.String,``0)">
            <summary>
            Добавляет значение к признаку
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="property">Выражение для выбора свойства вида o => o.SomeProperty</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.AddValue``1(System.String,System.String,``0)">
            <summary>
            Добавляет значение к признаку
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckTrait(System.String,System.String)">
            <summary>
            Проверяет наличие признака у свойства
            </summary>
            <param name="propertyName">Имя свойства</param>
            <param name="name">Имя признака</param>
            <returns>Признак существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckTrait(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Проверяет наличие признака у свойства
            </summary>
            <param name="property">Свойства</param>
            <param name="name">Имя признака</param>
            <returns>Признак существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckTrait(System.String)">
            <summary>
            Проверяет наличие признака типа
            </summary>
            <param name="name">Имя признака</param>
            <returns>Признак типа существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckValue(System.String,System.String,System.String)">
            <summary>
            Проверяет наличие значение у признака свойства
            </summary>
            <param name="propertyName">Имя свойства</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckValue(System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Проверяет наличие значение у признака свойства
            </summary>
            <param name="property">Свойство объекта</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.CheckValue(System.String,System.String)">
            <summary>
            Проверяет наличие значения у признака типа
            </summary>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.GetValue``1(System.String,System.String,System.String)">
            <summary>
            Получает значение признака
            </summary>
            <typeparam name="TValue">Тип значения признака</typeparam>
            <param name="propertyName">Имя свойства</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.GetValue``1(System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Получает значение признака
            </summary>
            <typeparam name="TValue">Тип значения признака</typeparam>
            <param name="property">Свойство объекта</param>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="M:Mcst.Model.Storage.McstObjectDescriptor.GetValue``1(System.String,System.String)">
            <summary>
            Получает значение признака типа
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="T:Mcst.Model.Storage.StorageMetadata">
            <summary>
            Набор дескрипторов, описывающих способы загрузки объектов хранилищем
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Add``1(Mcst.Model.Storage.McstObjectDescriptor{``0})">
            <summary>
            Добавляет дескриптор к коллекции дескрипторов типов, поддерживаемых хранилищем
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <param name="descriptor">Дескриптор типа</param>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Add(System.Type,Mcst.Model.Storage.McstObjectDescriptor)">
            <summary>
            Добавляет дескриптор к коллекции дескрипторов типов, поддерживаемых хранилищем
            </summary>
            <param name="type">Тип объекта</param>
            <param name="descriptor">Дескриптор типа</param>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Check``1">
            <summary>
            Проверяет поддерживаемость типа хранилищем
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <returns>Тип поддерживается хранилищем: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Check(System.Type)">
            <summary>
            Проверяет поддерживаемость типа хранилищем
            </summary>
            <param name="type">Тип объекта</param>
            <returns>Тип поддерживается хранилищем: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Get``1">
            <summary>
            Получает дескриптор типа
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <returns>Дескриптор типа</returns>
        </member>
        <member name="M:Mcst.Model.Storage.StorageMetadata.Get(System.Type)">
            <summary>
            Получает дескриптор типа
            </summary>
            <param name="type">Тип объекта</param>
            <returns>Дескриптор типа</returns>
        </member>
        <member name="T:Mcst.Model.Storage.TraitBase">
            <summary>
            Инициализатор признака без значений
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.TraitBase.Name">
            <summary>
            Имя признака
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.TraitBase.Keys">
            <summary>
            Ключи значений признака
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.#ctor(System.String,System.String[])">
            <summary>
            Создает инициализатор признака, не имеющего значений
            </summary>
            <param name="name">Имя признака</param>
            <param name="keys">Ключи значений признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Object[])">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="values">Значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object[])">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="values">Значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.Check``1(Mcst.Model.Storage.McstObjectDescriptor{``0})">
            <summary>
            Проверяет наличие признака у типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <returns>Признак определен: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.Check``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Проверяет наличие признака у свойства
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <typeparam name="TProperty">Свойство</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="selector">Селектор свойства</param>
            <returns>Признак определен: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.Get``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.String)">
            <summary>
            Извлекает значение признака для типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitBase.Get``3(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
            <summary>
            Извлекает значение признака для свойства
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="selector">Селектор свойства</param>
            <param name="key">Ключ значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="T:Mcst.Model.Storage.Trait">
            <summary>
            Инициализатор признака без значений
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.Trait.#ctor(System.String)">
            <summary>
            Создает инициализатор признака, не имеющего значений
            </summary>
            <param name="name">Имя признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0})">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`1">
            <summary>
            Инициализатор признака с одним значением
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`1.#ctor(System.String,System.String)">
            <summary>
            Создает инициализатор признака, с одним значением
            </summary>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`1.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value">Значение признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`1.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value">Значение признака</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`2">
            <summary>
            Инициализатор признака с двумя значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`2.#ctor(System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с двумя значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`2.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`2.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`3">
            <summary>
            Инициализатор признака с тремя значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
            <typeparam name="TValue3">Тип третьего значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`3.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с тремя значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
            <param name="key3">Ключ третьего значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`3.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1,`2)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`3.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1,`2)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`4">
            <summary>
            Инициализатор признака с четыремя значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
            <typeparam name="TValue3">Тип третьего значения</typeparam>
            <typeparam name="TValue4">Тип четвертого значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`4.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с четыремя значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
            <param name="key3">Ключ третьего значения признака</param>
            <param name="key4">Ключ четвертого значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`4.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1,`2,`3)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`4.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1,`2,`3)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`5">
            <summary>
            Инициализатор признака с пятью значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
            <typeparam name="TValue3">Тип третьего значения</typeparam>
            <typeparam name="TValue4">Тип четвертого значения</typeparam>
            <typeparam name="TValue5">Тип пятого значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`5.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с пятью значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
            <param name="key3">Ключ третьего значения признака</param>
            <param name="key4">Ключ четвертого значения признака</param>
            <param name="key5">Ключ пятого значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`5.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1,`2,`3,`4)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`5.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1,`2,`3,`4)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`6">
            <summary>
            Инициализатор признака с шестью значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
            <typeparam name="TValue3">Тип третьего значения</typeparam>
            <typeparam name="TValue4">Тип четвертого значения</typeparam>
            <typeparam name="TValue5">Тип пятого значения</typeparam>
            <typeparam name="TValue6">Тип шестого значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`6.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с шестью значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
            <param name="key3">Ключ третьего значения признака</param>
            <param name="key4">Ключ четвертого значения признака</param>
            <param name="key5">Ключ пятого значения признака</param>
            <param name="key6">Ключ шестого значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`6.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1,`2,`3,`4,`5)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
            <param name="value6">Значение 6</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`6.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1,`2,`3,`4,`5)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
            <param name="value6">Значение 6</param>
        </member>
        <member name="T:Mcst.Model.Storage.Trait`7">
            <summary>
            Инициализатор признака с семью значениями
            </summary>
            <typeparam name="TValue1">Тип первого значения</typeparam>
            <typeparam name="TValue2">Тип второго значения</typeparam>
            <typeparam name="TValue3">Тип третьего значения</typeparam>
            <typeparam name="TValue4">Тип четвертого значения</typeparam>
            <typeparam name="TValue5">Тип пятого значения</typeparam>
            <typeparam name="TValue6">Тип шестого значения</typeparam>
            <typeparam name="TValue7">Тип седьмого значения</typeparam>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`7.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Создает инициализатор признака, с семью значениями
            </summary>
            <param name="name">Имя признака</param>
            <param name="key1">Ключ первого значения признака</param>
            <param name="key2">Ключ второго значения признака</param>
            <param name="key3">Ключ третьего значения признака</param>
            <param name="key4">Ключ четвертого значения признака</param>
            <param name="key5">Ключ пятого значения признака</param>
            <param name="key6">Ключ шестого значения признака</param>
            <param name="key7">Ключ седьмого значения признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`7.AddToObject``1(Mcst.Model.Storage.McstObjectDescriptor{``0},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Добавляет признак типа
            </summary>
            <typeparam name="TObject">Тип</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
            <param name="value6">Значение 6</param>
            <param name="value7">Значение 7</param>
        </member>
        <member name="M:Mcst.Model.Storage.Trait`7.AddToProperty``2(Mcst.Model.Storage.McstObjectDescriptor{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Добавляет признак свойства
            </summary>
            <typeparam name="TObject">Тип объекта</typeparam>
            <typeparam name="TProperty">Тип свойства</typeparam>
            <param name="descriptor">Описатель типа</param>
            <param name="propertySelector">Селектор свойства</param>
            <param name="value1">Значение 1</param>
            <param name="value2">Значение 2</param>
            <param name="value3">Значение 3</param>
            <param name="value4">Значение 4</param>
            <param name="value5">Значение 5</param>
            <param name="value6">Значение 6</param>
            <param name="value7">Значение 7</param>
        </member>
        <member name="T:Mcst.Model.Storage.TraitSet">
            <summary>
            Множество признаков
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.Add(System.String)">
            <summary>
            Добавить признак в множество
            </summary>
            <param name="name">Название признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.Add``1(System.String,System.String,``0)">
            <summary>
            Добавляет значение к признаку
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="name">Имя признака</param>
            <param name="key">Ключ</param>
            <param name="value">Значение</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.Check(System.String)">
            <summary>
            Проверяет признак на существование
            </summary>
            <param name="name">Имя признака</param>
            <returns>Признак существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.Check(System.String,System.String)">
            <summary>
            Проверяет значение признака на существование
            </summary>
            <param name="name">Имя признака</param>
            <param name="key">Ключ значения прознака</param>
            <returns>Значение определено: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.Get``1(System.String,System.String)">
            <summary>
            Возвращает значение признака
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="name">Имя признака</param>
            <param name="key">Имя значения</param>
            <returns>Значение признака</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.GetEnumerator">
            <summary>
            Получает итератор для обхода всех признаков
            </summary>
            <returns>Итератор</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Получает итератор для обхода всех признаков
            </summary>
            <returns>Итератор</returns>
        </member>
        <member name="T:Mcst.Model.Storage.TraitValueSet">
            <summary>
            Базовый класс набора признаков свойства
            </summary>
        </member>
        <member name="P:Mcst.Model.Storage.TraitValueSet.Name">
            <summary>
            Имя набора признаков
            </summary>
        </member>
        <member name="M:Mcst.Model.Storage.TraitValueSet.Add``1(System.String,``0)">
            <summary>
            Добавить признак
            </summary>
            <typeparam name="TValue">Тип значения признака</typeparam>
            <param name="name">Имя признака</param>
            <param name="value">Значение признака</param>
        </member>
        <member name="M:Mcst.Model.Storage.TraitValueSet.Check(System.String)">
            <summary>
            Проверяет имеется ли в наборе признак с указанным именем
            </summary>
            <param name="name">Искомое имя признака</param>
            <returns>Признак с указанным именем существует: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Storage.TraitValueSet.Get``1(System.String)">
            <summary>
            Получит значение признака
            </summary>
            <typeparam name="TValue">Тип значения признака</typeparam>
            <param name="name">Имя признака</param>
            <returns>Значение признака</returns>
        </member>
        <member name="T:Mcst.Model.AccrueAt">
            <summary>
            Способ прибавления стоимости ресурса к стоимости задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.AccrueAt.End">
            <summary>
            Стоимость не прибавляется, пока оставшиеся трудозатраты не станут нулевыми
            </summary>
        </member>
        <member name="F:Mcst.Model.AccrueAt.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.AccrueAt.Prorated">
            <summary>
            Стоимость прибавляется пропорционально фактическим трудозатратам. Этот режим используется по умолчанию
            </summary>
        </member>
        <member name="F:Mcst.Model.AccrueAt.Start">
            <summary>
            Стоимость прибавляется на старте работы над задачей. Стать работы определяется наличием значения в поле фактического старта назначения
            </summary>
        </member>
        <member name="T:Mcst.Model.BookingType">
            <summary>
            Резервирование ресурсов
            </summary>
        </member>
        <member name="F:Mcst.Model.BookingType.Committed">
            <summary>
            Подтверждено
            </summary>
        </member>
        <member name="F:Mcst.Model.BookingType.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.BookingType.Proposed">
            <summary>
            Предложено
            </summary>
        </member>
        <member name="T:Mcst.Model.CommittedDecisionResult">
            <summary>
            Включение в функцию оптимизации или планирования анализатора портфеля проектов
            </summary>
        </member>
        <member name="F:Mcst.Model.CommittedDecisionResult.CommittedIn">
            <summary>
            Элемент включен в функцию
            </summary>
        </member>
        <member name="F:Mcst.Model.CommittedDecisionResult.CommittedOut">
            <summary>
            Элемент не включен в функцию
            </summary>
        </member>
        <member name="F:Mcst.Model.CommittedDecisionResult.ForcedIn">
            <summary>
            Элемент принудительно включен в функцию
            </summary>
        </member>
        <member name="F:Mcst.Model.CommittedDecisionResult.ForcedOut">
            <summary>
            Элемент принудительно исключен из функции
            </summary>
        </member>
        <member name="F:Mcst.Model.CommittedDecisionResult.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="T:Mcst.Model.Conformity">
            <summary>
            Состояние согласованности сдвига с ГК
            </summary>
        </member>
        <member name="F:Mcst.Model.Conformity.Confirmed">
            <summary>
            Сдвиг согласован
            </summary>
        </member>
        <member name="F:Mcst.Model.Conformity.ConfirmedByVice">
            <summary>
            Сдвиг согласован с заместителем ГК
            </summary>
        </member>
        <member name="F:Mcst.Model.Conformity.Unconfirmed">
            <summary>
            Сдвиг не согласован
            </summary>
        </member>
        <member name="F:Mcst.Model.Conformity.Pending">
            <summary>
            На рассмотрении
            </summary>
        </member>
        <member name="T:Mcst.Model.ConstraintType">
            <summary>
            Способ интерпретации даты ограничения задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.AsLateAsPossible">
            <summary>
            Планировать как можно позже
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.AsSoonAsPossible">
            <summary>
            Планировать как можно раньше
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.FinishNoEarlierThan">
            <summary>
            Ограничение на минимальную дату выполнения
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.FinishNoLaterThan">
            <summary>
            Ограничение на максимальную дату выполнения
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.MustFinishOn">
            <summary>
            Ограничение на точную дату выполнения
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.MustStartOn">
            <summary>
            Ограничение на точную дату старта
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.StartNoEarlierThan">
            <summary>
            Ограничение на минимальную дату старта
            </summary>
        </member>
        <member name="F:Mcst.Model.ConstraintType.StartNoLaterThan">
            <summary>
            Ограничение на максимальную дату старта
            </summary>
        </member>
        <member name="T:Mcst.Model.CurrencySymbolPosition">
            <summary>
            Положение символа валюты
            </summary>
        </member>
        <member name="F:Mcst.Model.CurrencySymbolPosition.After">
            <summary>
            После значения
            </summary>
        </member>
        <member name="F:Mcst.Model.CurrencySymbolPosition.AfterWithSpace">
            <summary>
            После значения, через пробел
            </summary>
        </member>
        <member name="F:Mcst.Model.CurrencySymbolPosition.Before">
            <summary>
            Перед значением, слитно
            </summary>
        </member>
        <member name="F:Mcst.Model.CurrencySymbolPosition.BeforeWithSpace">
            <summary>
            Перед значением через пробел
            </summary>
        </member>
        <member name="F:Mcst.Model.CurrencySymbolPosition.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="T:Mcst.Model.DependencyType">
            <summary>
            Тип зависимости между задачами
            </summary>
        </member>
        <member name="F:Mcst.Model.DependencyType.FinishFinish">
            <summary>
            Окончание-Окончание
            </summary>
        </member>
        <member name="F:Mcst.Model.DependencyType.FinishStart">
            <summary>
            Окончание-Начало
            </summary>
        </member>
        <member name="F:Mcst.Model.DependencyType.StartFinish">
            <summary>
            Начало-Окончание
            </summary>
        </member>
        <member name="F:Mcst.Model.DependencyType.StartStart">
            <summary>
            Начало-Начало
            </summary>
        </member>
        <member name="T:Mcst.Model.DocumentCategories">
            <summary>
            Категории документов, храняихся на сайте проекта
            </summary>
        </member>
        <member name="F:Mcst.Model.DocumentCategories.ExecutiveSheet">
            <summary>
            Ведомость исполнения
            </summary>
        </member>
        <member name="F:Mcst.Model.DocumentCategories.Agenda">
            <summary>
            Исходный материал
            </summary>
        </member>
        <member name="F:Mcst.Model.DocumentCategories.Order">
            <summary>
            Приказ
            </summary>
        </member>
        <member name="F:Mcst.Model.DocumentCategories.Protocol">
            <summary>
            Протокол совещания
            </summary>
        </member>
        <member name="F:Mcst.Model.DocumentCategories.Other">
            <summary>
            Прочие документы
            </summary>
        </member>
        <member name="T:Mcst.Model.EnterpriseResourceType">
            <summary>
            Тип ресурса
            </summary>
        </member>
        <member name="F:Mcst.Model.EnterpriseResourceType.Material">
            <summary>
            Материальный ресурс
            </summary>
        </member>
        <member name="F:Mcst.Model.EnterpriseResourceType.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.EnterpriseResourceType.Work">
            <summary>
            Рабочий ресурс (сотрудник)
            </summary>
        </member>
        <member name="T:Mcst.Model.FixedCostAccrual">
            <summary>
            Способ начисления или списания фиксированной стоимости
            </summary>
        </member>
        <member name="F:Mcst.Model.FixedCostAccrual.End">
            <summary>
            При завершении задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.FixedCostAccrual.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.FixedCostAccrual.Prorated">
            <summary>
            Пропорционально
            </summary>
        </member>
        <member name="F:Mcst.Model.FixedCostAccrual.Start">
            <summary>
            При старте задачи
            </summary>
        </member>
        <member name="T:Mcst.Model.IAssignment">
            <summary>
            Назначение
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualCost">
            <summary>
            Gets or sets the costs incurred for work already performed on the assignment, together with any 
            other recorded costs that are associated with the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualCostWorkPerformed">
            <summary>
            Gets the actual cost of work performed (ACWP) for the assignment to date
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualFinish">
            <summary>
            Gets or sets the date and time when the assignment is complete.
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualOvertimeCost">
            <summary>
            Gets the actual overtime cost for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualOvertimeWork">
            <summary>
            Gets or sets the actual amount of overtime work that has already been performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualOvertimeWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the actual amount of overtime work that has already been 
            performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualStart">
            <summary>
            Gets or sets the date and time that the assignment actually began, based on progress information 
            that was entered
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualWork">
            <summary>
            Gets or sets the amount of work that has already been performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ActualWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of work that has already been 
            performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineCost">
            <summary>
            Gets the total planned costs of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineCostPerUse">
            <summary>
            Gets the cost per use of a resource on an assignment, at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineFinish">
            <summary>
            Gets the planned completion date for an assignment, at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineStart">
            <summary>
            Gets the planned start date for an assignment, at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineWork">
            <summary>
            Gets total planned person-hours scheduled for an assignment, at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BaselineWorkTimeSpan">
            <summary>
            Gets the total time interval of planned person-hours scheduled for an assignment, at the time 
            of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BudgetedCost">
            <summary>
            Gets or sets the budgeted cost for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BudgetedCostWorkPerformed">
            <summary>
            Gets the budgeted cost of work performed (BCWP)
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BudgetedCostWorkScheduled">
            <summary>
            Gets the budgeted cost of work scheduled (BCWS) for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BudgetedWork">
            <summary>
            Gets or sets the budgeted work for the assignment.
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.BudgetedWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the budgeted work for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Cost">
            <summary>
            Gets or sets the total scheduled or projected cost for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.CostVariance">
            <summary>
            Gets the cost variance (CV), which is the difference between the baseline 
            cost and the total cost of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.CostVarianceAtCompletion">
            <summary>
            Gets the cost variance at completion (VAC) for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Created">
            <summary>
            Gets the date when the assignment was created
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.CurrentCostVariance">
            <summary>
            Gets the current cost variance (CV)
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.DefaultBookingType">
            <summary>
            Gets or sets the default booking type for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Delay">
            <summary>
            Gets or sets the amount of time that passes after the start date, 
            before work on the assignment starts
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.DelayTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of time that passes after the start date, 
            before work on the assignment starts
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Employee">
            <summary>
            Сотрудник, связанный данным назначением
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Finish">
            <summary>
            Gets or sets the date when the assignment is scheduled to be completed
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.FinishVariance">
            <summary>
            Gets the variance of the finish date of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.FinishVarianceTimeSpan">
            <summary>
            Gets the time interval for the variance of the finish date of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsConfirmed">
            <summary>
            Gets a value that shows whether the resource has accepted the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsLockedByManager">
            <summary>
            Gets or sets a value that indicates whether the assignment has been locked for changes by a manager
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsOverAllocated">
            <summary>
            Gets a value that indicates whether the resource is overallocated during the time of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsPublished">
            <summary>
            Gets a value that indicates whether the assignment is published
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsResponsePending">
            <summary>
            Gets a value that shows whether the assignment update has been sent to the resource
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsUpdateNeeded">
            <summary>
            Gets a value that indicates whether an assignment update should be sent to the resource
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.IsWorkResource">
            <summary>
            Gets or sets a value that indicates whether an assignment resource is a work resource or 
            a material resource
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.LevelingDelay">
            <summary>
            	Gets the amount of time that resource leveling can delay the assignment from its 
            	early start date
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.LevelingDelayTimeSpan">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Modified">
            <summary>
            Gets the time interval for the amount of time that resource leveling can delay the assignment 
            from its early start date
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.OvertimeCost">
            <summary>
            Gets the total overtime cost of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.OvertimeWork">
            <summary>
            Gets or sets the amount of overtime that is scheduled to be performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.OvertimeWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of overtime that is scheduled to 
            be performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Owner">
            <summary>
            Gets or sets the name of the user who is responsible for entering status for the current assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Parent">
            <summary>
            Gets the parent assignment link
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.PercentWorkComplete">
            <summary>
            Gets or sets the amount of work that has been done on the assignment, expressed as a percentage 
            of the total work
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Project">
            <summary>
            Проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RegularWork">
            <summary>
            Gets or sets the total amount of nonovertime work that is scheduled to be performed 
            on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RegularWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the total amount of nonovertime work that is scheduled 
            to be performed on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingCost">
            <summary>
            Gets the total remaining cost of the assignment, as scheduled
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingOvertimeCost">
            <summary>
            Gets the scheduled remaining overtime cost of the assignment.
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingOvertimeWork">
            <summary>
            Gets or sets the amount of remaining scheduled overtime work on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingOvertimeWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of remaining scheduled overtime work on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingWork">
            <summary>
            Gets or sets the amount of time, such as person-hours or days, that is still required to complete 
            the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.RemainingWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of time, such as person-hours or days, that is still 
            required to complete the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ResourceCapacity">
            <summary>
            Gets or sets a value that indicates how much work the resource performs on the assignment, expressed 
            as a percentage of the resource's theoretical full capacity
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Resume">
            <summary>
            Gets the date and time when a resource resumes work on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.ScheduleCostVariance">
            <summary>
            Gets the schedule cost variance (CV), which is the difference between the baseline cost and the 
            scheduled cost of the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Start">
            <summary>
            Gets the date and time that a resource is scheduled to start the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.StartVariance">
            <summary>
            Gets the variance of the assignment start date
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.StartVarianceTimeSpan">
            <summary>
            Gets the time interval for the variance of the assignment start date
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Stop">
            <summary>
            Gets the date and time when a resource stops work on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Task">
            <summary>
            Gets the task to which the assignment belongs
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.Work">
            <summary>
            Gets or sets the total amount of time that is scheduled for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.WorkTimeSpan">
            <summary>
            Gets or sets the time interval for the total amount of time that is scheduled for the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.WorkVariance">
            <summary>
            Gets the difference between baseline work and currently scheduled work on the assignment
            </summary>
        </member>
        <member name="P:Mcst.Model.IAssignment.WorkVarianceTimeSpan">
            <summary>
            Gets the time interval for the difference between baseline work and currently scheduled 
            work on the assignment
            </summary>
        </member>
        <member name="T:Mcst.Model.IDocument">
            <summary>
            Документ
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocument.Category">
            <summary>
            Категория документа
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocument.Extension">
            <summary>
            Расширение файла
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocument.Size">
            <summary>
            Размер файла документа в байтах
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocument.Url">
            <summary>
            Ссылка для загрузки документа
            </summary>
        </member>
        <member name="M:Mcst.Model.IDocument.Open">
            <summary>
            Открыть документ на чтение
            </summary>
            <returns>Экземпляр потока, связанного с документом. Время жизни потока не связано с документом</returns>
        </member>
        <member name="T:Mcst.Model.IDocumentLibrary">
            <summary>
            Библиотека документов
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocumentLibrary.Agendas">
            <summary>
            Исходные материалы
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocumentLibrary.Order">
            <summary>
            Приказ о создании проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocumentLibrary.Others">
            <summary>
            Прочие документы
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocumentLibrary.Results">
            <summary>
            Протоколы
            </summary>
        </member>
        <member name="P:Mcst.Model.IDocumentLibrary.Sheet">
            <summary>
            Ведомость исполнения
            </summary>
        </member>
        <member name="M:Mcst.Model.IDocumentLibrary.Create(System.String)">
            <summary>
            Создает документ из указанного файла
            </summary>
            <param name="path">Путь к файлу</param>
            <returns>Новый документ</returns>
        </member>
        <member name="M:Mcst.Model.IDocumentLibrary.Create(System.Byte[],System.String)">
            <summary>
            Создает документ из предоставленного потока
            </summary>
            <param name="content">Кодержимое файла</param>
            <param name="fileName">Имя файла</param>
            <returns>Созданный документ</returns>
        </member>
        <member name="M:Mcst.Model.IDocumentLibrary.Create(System.IO.Stream,System.String)">
            <summary>
            Создает документ из предоставленного потока
            </summary>
            <param name="stream">Поток с содержимым файла</param>
            <param name="fileName">Имя файла</param>
            <returns>Созданный документ</returns>
        </member>
        <member name="T:Mcst.Model.IEmployee">
            <summary>
            Сотрудник
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.AccountName">
            <summary>
            Имя учетной записи сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Assignments">
            <summary>
            Назначения сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.CanLevel">
            <summary>
            Gets or sets a value that indicates whether resource leveling can be performed on an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Code">
            <summary>
            Gets or sets any code, abbreviation, or number that is entered as part of the information about an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.CostAccrual">
            <summary>
            Gets or sets a value that represents how and when to charge enterprise resource costs to the cost of a task.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.CostCenter">
            <summary>
            Gets or sets any code, abbreviation, or number that is entered as cost center information for an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Created">
            <summary>
            Gets the date and time when an enterprise resource was added to the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.DefaultBookingType">
            <summary>
            Gets or sets the default booking type for an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.ExternalId">
            <summary>
            Gets or sets any code, abbreviation, or number that is entered as an external identifier for an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.FullName">
            <summary>
            Полное имя в формате ФИО
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Group">
            <summary>
            Gets or sets the name of a group to which an enterprise resource belongs.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.HireDate">
            <summary>
            Gets or sets the date and time of hire for an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Initials">
            <summary>
            Gets or sets the abbreviation for the name of an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsActive">
            <summary>
            Gets or sets a value that indicates whether an enterprise resource has been made active or inactive.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsBudget">
            <summary>
            Gets a Boolean value that indicates whether an enterprise resource is a budget resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsCheckedOut">
            <summary>
            Gets a value that indicates whether enterprise resource assignment data is currently available for updating or modification, or whether the enterprise resource is checked out.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsGeneric">
            <summary>
            Gets a Boolean value that indicates whether an enterprise resource is generic.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsSiteAdmin">
            <summary>
            Является ли сотрудник администратором сайта
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.IsTeam">
            <summary>
            Gets a Boolean value that indicates whether a resource is in a team assignment pool.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Modified">
            <summary>
            Gets the modified date and time.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.ResourceType">
            <summary>
            Gets an enumerated value that represents the type of an enterprise resource.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.TerminationDate">
            <summary>
            Gets or sets the date and time after which the resource can no longer be used.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Phonetics">
            <summary>
            Gets or sets phonetic information for resource names in either the Japanese Hiragana writing system or the Katakana writing system.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.ShortName">
            <summary>
            Сокращенное имя в формате Фамилия И.О.
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.FirstName">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.SecondName">
            <summary>
            Отчество
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.LastName">
            <summary>
            Фамилия
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Email">
            <summary>
            Адрес электронной почты
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Head">
            <summary>
            Руководитель сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Subordinates">
            <summary>
            Подчиненные данного сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Projects">
            <summary>
            Проекты, в группу которых входит сотрудник
            </summary>
        </member>
        <member name="P:Mcst.Model.IEmployee.Rbs">
            <summary>
            Положение сотрудника в структурной декомпозиции
            </summary>
        </member>
        <member name="M:Mcst.Model.IEmployee.IsHeadOf(Mcst.Model.IEmployee)">
            <summary>
            Является ли текущий сотрудник руководителем указанного сотрудника
            </summary>
            <param name="other">Предполагаемый подчиненный</param>
            <returns>Если текущий сотрудник является руководителем указанного: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.IEmployee.IsSubordinateOf(Mcst.Model.IEmployee)">
            <summary>
            Является ли текущий сотрудник руководителем указанного сотрудника
            </summary>
            <param name="other">Предполагаемый руководитель</param>
            <returns>Если текущий сотрудник является подчиненным указанного: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.IEmployee.IsUnrelatedWith(Mcst.Model.IEmployee)">
            <summary>
            Проверяет, что текущий сотрудник не связан с указанным сотрудником отношениями начальник-подчиненный
            </summary>
            <param name="other">Второй сотрудник</param>
            <returns>Если текущий сотрудник не связан с указанным отношениями руководитель-подчиненный: true; иначе: false</returns>
        </member>
        <member name="T:Mcst.Model.ILink">
            <summary>
            Связь между задачами
            </summary>
        </member>
        <member name="P:Mcst.Model.ILink.From">
            <summary>
            Задача-предшественник
            </summary>
        </member>
        <member name="P:Mcst.Model.ILink.To">
            <summary>
            Задача-последователь
            </summary>
        </member>
        <member name="P:Mcst.Model.ILink.Type">
            <summary>
            Тип связи
            </summary>
        </member>
        <member name="T:Mcst.Model.IMcstObject">
            <summary>
            Объект АСУП МЦСТ
            </summary>
        </member>
        <member name="P:Mcst.Model.IMcstObject.Context">
            <summary>
            Конекст
            </summary>
        </member>
        <member name="P:Mcst.Model.IMcstObject.Guid">
            <summary>
            Уникальный идентификатор
            </summary>
        </member>
        <member name="M:Mcst.Model.IMcstObject.Delete">
            <summary>
            Удаляет объект
            </summary>
        </member>
        <member name="T:Mcst.Model.IMcstModel">
            <summary>
            Контекст АСУП МЦСТ
            </summary>
        </member>
        <member name="P:Mcst.Model.IMcstModel.Projects">
            <summary>
            Проекты
            </summary>
        </member>
        <member name="P:Mcst.Model.IMcstModel.Employees">
            <summary>
            Сотрундники
            </summary>
        </member>
        <member name="M:Mcst.Model.IMcstModel.CreateProject">
            <summary>
            Создает новый проект
            </summary>
            <returns>Созданный проект</returns>
        </member>
        <member name="M:Mcst.Model.IMcstModel.CreateEmployee">
            <summary>
            Создает нового сотрудника
            </summary>
            <returns>Созданный сотрудник</returns>
        </member>
        <member name="M:Mcst.Model.IMcstModel.PreloadProjects">
            <summary>
            Предваритальная загрузка всех проектов
            </summary>
        </member>
        <member name="M:Mcst.Model.IMcstModel.PreloadEmployees">
            <summary>
            Предваритальная загрузка всех сотрудников
            </summary>
        </member>
        <member name="P:Mcst.Model.IMcstModel.CurrentEmployee">
            <summary>
            Текущий сотрудник
            </summary>
        </member>
        <member name="M:Mcst.Model.IMcstModel.GetEmployee(System.String)">
            <summary>
            Получить сотрудника по имени входа
            </summary>
            <param name="loginName">Имя входа сотрудника</param>
            <returns>Сотрудник</returns>
        </member>
        <member name="M:Mcst.Model.IMcstModel.RegisterProperty``1(``0)">
            <summary>
            Добавить свойство к модели
            </summary>
            <typeparam name="TProp">Тип свойства</typeparam>
        </member>
        <member name="M:Mcst.Model.IMcstModel.QueryProperty``1">
            <summary>
            Получить свойство модели
            </summary>
            <typeparam name="TProp">Тип свойства</typeparam>
            <returns>Свойство</returns>
        </member>
        <member name="T:Mcst.Model.IMeeting">
            <summary>
            Оперативное совещание по проекту
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Agenda">
            <summary>
            Исходный материал к совещанию
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Cancelled">
            <summary>
            Отменено ли совещание
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Comment">
            <summary>
            Комментарий к совещанию в виде текста
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.DateTime">
            <summary>
            Дата и время проведения совещания
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Done">
            <summary>
            Совещание завершено
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.InvitedEmployees">
            <summary>
            Приглашенные сотрудники
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.InvolvedEmployees">
            <summary>
            Участвовавшие сотрудники
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Leader">
            <summary>
            Ведущий
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Manager">
            <summary>
            Организатор
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Number">
            <summary>
            Номер совещания
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Result">
            <summary>
            Протокол совещания
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Stages">
            <summary>
            Этапы, вынесенные на обсуждение
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeeting.Topic">
            <summary>
            Тема совещания в текстовом виде
            </summary>
        </member>
        <member name="T:Mcst.Model.IMeetingList">
            <summary>
            Список оперативных совещаний
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeetingList.Next">
            <summary>
            Следующее оперативное совещание
            </summary>
        </member>
        <member name="P:Mcst.Model.IMeetingList.Last">
            <summary>
            Последнее оперативное совещание
            </summary>
        </member>
        <member name="T:Mcst.Model.IMessage">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="P:Mcst.Model.IMessage.Text">
            <summary>
            Текст сообщения
            </summary>
        </member>
        <member name="P:Mcst.Model.IMessage.Order">
            <summary>
            Приказ Ген. директора
            </summary>
        </member>
        <member name="T:Mcst.Model.IMessageList">
            <summary>
            Список сообщений
            </summary>
        </member>
        <member name="P:Mcst.Model.IMessageList.Orders">
            <summary>
            Список сообщений директора
            </summary>
        </member>
        <member name="P:Mcst.Model.IMessageList.Others">
            <summary>
            Список простых сообщений
            </summary>
        </member>
        <member name="T:Mcst.Model.INote">
            <summary>
            Заметка
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.ConfirmedBy">
            <summary>
            Согласовано с
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.ConfirmedByConstructor">
            <summary>
            Согласовано с ГК
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.ConfirmedByDirector">
            <summary>
            Согласовано с директором
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.DateTime">
            <summary>
            Дата и время утверждения заметки
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.DecisionOfConstructor">
            <summary>
            Решение ГК
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.DecisionOfDirector">
            <summary>
            Решение директора
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.From">
            <summary>
            От кого
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.HtmlText">
            <summary>
            Текст в формате HTML
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.IsCompleted">
            <summary>
            Выполнено
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.PostponementDate">
            <summary>
            Дата сдвига
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.PostponementType">
            <summary>
            Тип сдвига
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.ReportDate">
            <summary>
            Дата исполнения/отчета
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.Target">
            <summary>
            Объект, к которому прикреплена заметка
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.TaskState">
            <summary>
            Состояние работы
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.Text">
            <summary>
            Текст заметки
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.To">
            <summary>
            Кому поручено исполнение
            </summary>
        </member>
        <member name="P:Mcst.Model.INote.Type">
            <summary>
            Тип заметки
            </summary>
        </member>
        <member name="T:Mcst.Model.IProject">
            <summary>
            Проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ApprovedEnd">
            <summary>
            Gets the approved end date in the project portfolio planner.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ApprovedStart">
            <summary>
            Gets the approved start date in the project portfolio planner.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Assignments">
            <summary>
            Назначения всех задач
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CalculateActualCosts">
            <summary>
            Gets or sets whether Project Server automatically calculates actual and remaining work and costs.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CalculatesActualCosts">
            <summary>
            Gets or sets whether the project always calculates actual costs.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CheckedOutBy">
            <summary>
            Сотрудник, извлекший проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CheckedOutDate">
            <summary>
            Дата и время извлечения проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CheckOutDescription">
            <summary>
            Описание к текущему сеансу извлечения
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CheckOutId">
            <summary>
            Идентификатор сеанса, в котором был извлечен проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Constructor">
            <summary>
            Главный конструктор проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CreatedDate">
            <summary>
            Дата и время создания
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CriticalSlackLimit">
            <summary>
            Gets or sets the number of days that a task can go past its end date before the project marks 
            that task as critical.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CurrencyCode">
            <summary>
            Gets or sets the currency code of the project, as defined in ISO 4217.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CurrencyDigits">
            <summary>
            Gets or sets the number of decimal digits in currency values.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CurrencyPosition">
            <summary>
            Gets or sets the placement of the currency symbol in relation to the currency value.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol that represents the type of currency that is used in the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.CurrentDate">
            <summary>
            Gets or sets the current date for the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DaysPerMonth">
            <summary>
            Gets or sets the default number of working days per month.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultEffortDriven">
            <summary>
            Gets or sets a value that indicates whether the scheduling of new tasks is effort-driven.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultEstimatedDuration">
            <summary>
            Gets or sets a value that indicates whether new tasks have estimated durations.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultFinishTime">
            <summary>
            Gets or sets the default end time of a working day.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultFixedCostAccrual">
            <summary>
            Gets or sets a value that indicates which default fixed cost accrual method to use on new tasks.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultOvertimeRate">
            <summary>
            Gets or sets the default overtime rate for local resources.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultOvertimeRateUnits">
            <summary>
            Gets the time unit for the default overtime rate that is stored by the DefaultOvertimeRate property.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultStandardRate">
            <summary>
            Gets or sets the default standard rate for local resources.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultStandardRateUnits">
            <summary>
            Gets the time unit for the default standard rate that is stored by the DefaultStandardRate property.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultStartTime">
            <summary>
            Gets or sets the default start time of a working day.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultTaskType">
            <summary>
            Gets or sets the default type for tasks in the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DefaultWorkFormat">
            <summary>
            Gets or sets the default format for work duration.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Description">
            <summary>
            Описание
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.DisplayName">
            <summary>
            Отображаемое имя
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Documents">
            <summary>
            Библиотека документов
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.FinishDate">
            <summary>
            Дата завершения проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.FiscalYearStartMonth">
            <summary>
            Gets or sets the number of the first month in the fiscal year.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.HasMppPendingImport">
            <summary>
            Gets a value that indicates whether there is an mpp file waiting to be imported.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.HonorConstraints">
            <summary>
            Gets or sets a value that indicates whether scheduling constraints take precedence over dependencies.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.IsCheckedOut">
            <summary>
            Извлечен ли проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.LastPublishedDate">
            <summary>
            Дата последней публикации проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.LastSavedDate">
            <summary>
            Дата последнего сохранения проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Manager">
            <summary>
            Ответственный за организационно-техническое сопровождение проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MeetingDayOfWeek">
            <summary>
            День недели оперативных совещаний
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Meetings">
            <summary>
            Список оперативных совещаний по проекту
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MeetingTime">
            <summary>
            Время оперативных совещаний
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Messages">
            <summary>
            Список сообщений к исходным материалам проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MinutesPerDay">
            <summary>
            Gets or sets the default number of minutes per day.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MinutesPerWeek">
            <summary>
            Gets or sets the default number of minutes per week.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MoveActualIfLater">
            <summary>
            Gets or sets a value that indicates whether to move the end date of completed parts forward to the 
            status date, if the actual end date falls before the status date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MoveActualToStatus">
            <summary>
            Gets or sets a value that indicates whether to move the end date of completed parts back to the 
            status date, if the actual end data falls after the status date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MoveRemainingIfEarlier">
            <summary>
            Gets or sets a value that indicates whether to move the start date of remaining parts forward to the 
            status date, if the actual start date falls before the status date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MoveRemainingToStatus">
            <summary>
            Gets or sets a value that indicates whether to move the start date of the remaining parts back to the 
            status date, if the actual start date falls after the status date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.MultipleCriticalPaths">
            <summary>
            Gets or sets a value that indicates whether to calculate multiple critical paths.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Name">
            <summary>
            Имя проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.NewTasksAreManual">
            <summary>
            Gets or sets a value that indicates whether new tasks are manually scheduled.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.NumberFiscalYearFromStart">
            <summary>
            Gets or sets a value that indicates whether to use the project start year for fiscal year numbering.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.OptimizerDecision">
            <summary>
            Gets the result of the Optimizer in a project portfolio analysis.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Owner">
            <summary>
            Владелец проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Parent">
            <summary>
            Родительский проект
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.PercentComplete">
            <summary>
            Процент завершения проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.PlannerDecision">
            <summary>
            Gets the result of the Planner in a project portfolio analysis.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ProjectSiteUrl">
            <summary>
            Адрес сайта проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ProtectedActualsSynch">
            <summary>
            Gets or sets a value that indicates whether the project actuals are synchronized with 
            the protected actuals.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ProtocolUrl">
            <summary>
            URL онлайн версии протокола последнего совещания
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.PSType">
            <summary>
            Тип проекта Project Server
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Employees">
            <summary>
            Группа проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ScheduledFromStart">
            <summary>
            Gets or sets a value that indicates whether the project is scheduled from the start date instead of 
            the finish date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.ShowEstimatedDurations">
            <summary>
            Gets or sets a value that indicates whether a question mark is displayed after an estimated duration 
            for a task.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.SourceUrl">
            <summary>
            URL онлайн-версии исходного материала
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.SplitInProgress">
            <summary>
            Gets or sets a value that indicates whether to split tasks that are in progress.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.SpreadActualCostsToStatus">
            <summary>
            Gets or sets a value that indicates whether the consideration period for actual costs is spread to 
            the status date or to the stop date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.SpreadPercentCompleteToStatus">
            <summary>
            Gets or sets a value that indicates whether the consideration period for task percentage complete 
            is spread to the status date or to the task finish date.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Stages">
            <summary>
            Список этапов проекта согласно ведомости исполнения
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.StartDate">
            <summary>
            Дата начала проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.StatusDate">
            <summary>
            Gets or sets the current status date for the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.SubProjects">
            <summary>
            Подпроекты
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Links">
            <summary>
            Gets the collection of draft task link objects for the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.TaskListId">
            <summary>
            Идентификатор списка задач проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.Tasks">
            <summary>
            Задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.TrackingMode">
            <summary>
            Gets or sets the default tracking method for all assignments in the project.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.WeekStartDay">
            <summary>
            Gets or sets the day of the week on which a work week starts.
            </summary>
        </member>
        <member name="P:Mcst.Model.IProject.WinprojVersion">
            <summary>
            Gets or sets the version of Project Professional that created the draft project.
            </summary>
        </member>
        <member name="M:Mcst.Model.IProject.Store">
            <summary>
            Сохраняет все изменения, внесенные в проект. Требуется хотя бы одно хранилище
            </summary>
        </member>
        <member name="M:Mcst.Model.IProject.Publish">
            <summary>
            Сохраняет все изменения, внесенные в проект и осуществляет его публикацию
            </summary>
        </member>
        <member name="M:Mcst.Model.IProject.StoreAsync">
            <summary>
            Сохраняет все изменения, внесенные в проект. Требуется хотя бы одно хранилище
            </summary>
        </member>
        <member name="M:Mcst.Model.IProject.PublishAsync">
            <summary>
            Сохраняет все изменения, внесенные в проект и осуществляет его публикацию
            </summary>
        </member>
        <member name="M:Mcst.Model.IProject.CreateTask">
            <summary>
            Добавляет задачу в проект
            </summary>
            <returns>Добавленная задача</returns>
        </member>
        <member name="M:Mcst.Model.IProject.CreateTask(Mcst.Model.ITask)">
            <summary>
            Добавляет задачу в проект после указанной задачи
            </summary>
            <param name="after">Задача-предшественник создаваемой задачи</param>
            <returns>Созданная задача</returns>
        </member>
        <member name="M:Mcst.Model.IProject.AddResource(Mcst.Model.IEmployee)">
            <summary>
            Добавляет сотрудник в группу проекта
            </summary>
            <param name="employee">Сотрудник</param>
        </member>
        <member name="T:Mcst.Model.IProjectItem">
            <summary>
            Элемент одного из связанных с проектом списков
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Project">
            <summary>
            Проект, для которого определен этот элемент
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Author">
            <summary>
            Владелец элемента
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Created">
            <summary>
            Дата и время создания элемента
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Id">
            <summary>
            Идентификатор элемента в списке
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Loaded">
            <summary>
            Элемент загружен
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Modified">
            <summary>
            Дата последней модификации элемента
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Name">
            <summary>
            Имя элемента
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItem.Null">
            <summary>
            Объект отсутствует на сервере
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItem.Load">
            <summary>
            Осуществляет загрузку или перезагрузку элемента
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItem.Save">
            <summary>
            Сохранить изменения, внесенные в элемент, но не отправлять их на сервер
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItem.Delete">
            <summary>
            Удаляет элемент. Для применения изменения требуется вызвать метод Save родительского списка
            </summary>
        </member>
        <member name="T:Mcst.Model.IProjectItemField`1">
            <summary>
            Неизменяемое поле элемента проекта, включающее основное значение, html-разметку и текстовое значение
            </summary>
            <typeparam name="TValue">Тип поля</typeparam>
        </member>
        <member name="P:Mcst.Model.IProjectItemField`1.Value">
            <summary>
            Основное значение поля
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItemField`1.Html">
            <summary>
            Html-разметка для поля
            </summary>
        </member>
        <member name="P:Mcst.Model.IProjectItemField`1.Text">
            <summary>
            Текст поля
            </summary>
        </member>
        <member name="T:Mcst.Model.IProjectItemList`1">
            <summary>
            Список элементов проекта
            </summary>
            <typeparam name="ItemT">Элемент списка</typeparam>
        </member>
        <member name="P:Mcst.Model.IProjectItemList`1.Item(System.Int32)">
            <summary>
            Получить элемент по идентификатору
            </summary>
            <param name="index">Идентификатор элемента в списке</param>
            <returns>Элемент</returns>
        </member>
        <member name="P:Mcst.Model.IProjectItemList`1.Item(System.Guid)">
            <summary>
            Получить элемент по уникальному идентификатору
            </summary>
            <param name="id">Уникальный идентификатор элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="P:Mcst.Model.IProjectItemList`1.Project">
            <summary>
            Проект
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItemList`1.Create">
            <summary>
            Создать новый элемент
            </summary>
            <returns>Новый элемент</returns>
        </member>
        <member name="M:Mcst.Model.IProjectItemList`1.Load">
            <summary>
            Выполнить загрузку элементов списка
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItemList`1.Save">
            <summary>
            Сохранить все изменения в списке
            </summary>
        </member>
        <member name="T:Mcst.Model.IProjectItemMutableField`1">
            <summary>
            Изменяемое поле элемента проекта, включающее основное значение, html-разметку и текстовое значение
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:Mcst.Model.IProjectItemMutableField`1.Value">
            <summary>
            Значение поля
            </summary>
        </member>
        <member name="T:Mcst.Model.IProjectItemsFactory">
            <summary>
            Фабрика элементов проекта
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItemsFactory.CreateSource(Mcst.Model.IProject)">
            <summary>
            Создает источник элементов проекта, свзанный с указанным проектом
            </summary>
            <param name="project">Проект</param>
            <returns>Источник элементов проекта</returns>
        </member>
        <member name="T:Mcst.Model.IProjectItemsSource">
            <summary>
            Фабрика элементов проекта
            </summary>
        </member>
        <member name="M:Mcst.Model.IProjectItemsSource.CreateDocumentLibrary">
            <summary>
            Создать библиотеку документов
            </summary>
            <returns>Библиотека документов</returns>
        </member>
        <member name="M:Mcst.Model.IProjectItemsSource.CreateMeetingList">
            <summary>
            Содать список совещаний
            </summary>
            <returns>Список совещаний</returns>
        </member>
        <member name="M:Mcst.Model.IProjectItemsSource.CreateMessageList">
            <summary>
            Создать список сообщений
            </summary>
            <returns>Список сообщений</returns>
        </member>
        <member name="M:Mcst.Model.IProjectItemsSource.CreateStageList">
            <summary>
            Создать список этапов
            </summary>
            <returns>Список этапов</returns>
        </member>
        <member name="T:Mcst.Model.ISequence`1">
            <summary>
            Коллекция объектов МЦСТ
            </summary>
            <typeparam name="ElemT">Тип элементов последовательности</typeparam>
        </member>
        <member name="P:Mcst.Model.ISequence`1.Context">
            <summary>
            Контекст АСУП МЦСТ
            </summary>
        </member>
        <member name="T:Mcst.Model.ISequenceInternal`1">
            <summary>
            Коллекция объектов МЦСТ
            </summary>
        </member>
        <member name="P:Mcst.Model.ISequenceInternal`1.Item(System.Guid)">
            <summary>
            Получить элемент последовательности по его идентификатору
            </summary>
            <param name="id">Идентификатор элемента</param>
            <returns>Элемент</returns>
        </member>
        <member name="P:Mcst.Model.ISequenceInternal`1.IsEmpty">
            <summary>
            Последовательность пуста
            </summary>
        </member>
        <member name="T:Mcst.Model.IStage">
            <summary>
            Этап проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.DisplayNumber">
            <summary>
            Отображаемый номер этапа
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Done">
            <summary>
            Этап завершен
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Finish">
            <summary>
            Дата фактического завершения этапа
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Presentation">
            <summary>
            Дата предъявления результатов этапа заказчику
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Proposed">
            <summary>
            Вынесен ли этап для обсуждения на совещаниях
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.PlannedFinish">
            <summary>
            Дата предполагаемого завершения работ по этапу
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Results">
            <summary>
            Результаты этапа
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Tasks">
            <summary>
            Наименование и содержание работ
            </summary>
        </member>
        <member name="P:Mcst.Model.IStage.Terms">
            <summary>
            Сроки исполнения этапа в текстовом виде
            </summary>
        </member>
        <member name="T:Mcst.Model.IStageList">
            <summary>
            Список этапов проекта
            </summary>
        </member>
        <member name="P:Mcst.Model.IStageList.Active">
            <summary>
            Обсуждаемые на оперативных совещаниях этапы
            </summary>
        </member>
        <member name="P:Mcst.Model.IStageList.Current">
            <summary>
            Текущий этап
            </summary>
        </member>
        <member name="T:Mcst.Model.ITask">
            <summary>
            Задача
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Project">
            <summary>
            Проект
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualCost">
            <summary>
            Gets or set costs incurred for work already performed on a task, 
            together with any other recorded costs that are associated with a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualCostWorkPerformed">
            <summary>
            Gets or sets costs incurred for work already performed on a task to date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualDuration">
            <summary>
            Gets the span of active working time that is required to complete a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualDurationTimeSpan">
            <summary>
            Gets the total time interval for the span of active working time that is required to complete a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualFinish">
            <summary>
            Gets or sets a date and time when a task is complete
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualOvertimeCost">
            <summary>
            Gets or sets costs incurred for overtime work already performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualOvertimeWork">
            <summary>
            Gets or sets the actual amount of overtime work already performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualOvertimeWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the actual amount of overtime work already performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualStart">
            <summary>
            Gets or sets a date and time that a task actually began, based on progress information that has been entered
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualWork">
            <summary>
            Gets or sets the amount of work that has already been performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ActualWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of work that has already been performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Assignments">
            <summary>
            Назначения задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineCost">
            <summary>
            Gets the total planned cost for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineDuration">
            <summary>
            Gets the original span of time that is planned to complete the task, 
            established at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineDurationTimeSpan">
            <summary>
            Gets the total time interval for the original span of time that is planned to complete the task, 
            established at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineFinish">
            <summary>
            Gets the planned task completion date that was set at the time that the baseline was saved
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineStart">
            <summary>
            Gets the planned task start date that was set at the time that the baseline was saved
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineWork">
            <summary>
            Gets the total planned person-hours that are scheduled for a task, as established at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BaselineWorkTimeSpan">
            <summary>
            Gets the total time interval for the total planned person-hours that are scheduled for 
            the task, as established at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BudgetCost">
            <summary>
            Gets the budget costs for budget cost resources
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BudgetedCostWorkPerformed">
            <summary>
            Gets or sets the estimated cost of work performed to date on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BudgetedCostWorkScheduled">
            <summary>
            Gets or sets the estimated cost of scheduled work on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BudgetWork">
            <summary>
            Gets or sets the amount of work that is estimated to be performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.BudgetWorkTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of work that is estimated to be performed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Completion">
            <summary>
            Gets or sets a completion date for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ConstraintStartEnd">
            <summary>
            Gets or sets a constraint start date or end date for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ConstraintType">
            <summary>
            Gets or sets the time constraint type for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Contact">
            <summary>
            Gets or sets a task contact
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Cost">
            <summary>
            Gets or sets the total scheduled or projected cost based on costs already incurred for work 
            performed on a task, in addition to the costs planned for the remaining work
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.CostPerformanceIndex">
            <summary>
            Gets the ratio of the baseline costs of work that has been performed on the task to the actual costs 
            of work that has been performed, calculated up to the project status date or today's date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.CostVariance">
            <summary>
            Gets the difference between the baseline cost and the total cost for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.CostVarianceAtCompletion">
            <summary>
            Gets the difference between the baseline cost and the total cost at the completion of the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.CostVariancePercentage">
            <summary>
            Gets the ratio of cost variance (CV) to the budgeted cost of 
            work that has been performed on the task (BCWP), expressed as a percentage
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Created">
            <summary>
            Gets the date and the time when the task was added to the project
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Deadline">
            <summary>
            Gets or sets the date that was entered as a deadline for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.DisplayNumber">
            <summary>
            Отображаемый номер задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Duration">
            <summary>
            Gets or sets the amount of time that it takes to complete a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.DurationTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of time that it takes to complete a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.DurationVariance">
            <summary>
            Gets the difference between the baseline duration of the task and the total duration, 
            or current estimated duration, of the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.DurationVarianceTimeSpan">
            <summary>
            Gets the total time interval for the difference between the baseline duration of the 
            task and the total duration, or current estimated duration, of the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.EarliestFinish">
            <summary>
            Gets the earliest date that the task could possibly finish, based on the early finish 
            dates of predecessor and successor tasks, other constraints, and any leveling delay
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.EarliestStart">
            <summary>
            Gets the earliest date that the task could possibly begin, based on the early 
            start dates of predecessor and successor tasks and other constraints
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.EstimateAtCompletion">
            <summary>
            Gets the estimate at completion (EAC) for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Finish">
            <summary>
            Дата планируемого завершения задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FinishSlack">
            <summary>
            Gets the duration between the EarlyFinish date and the LateFinish date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FinishSlackTimeSpan">
            <summary>
            Gets the total time interval of planned person-hours scheduled for 
            an assignment, at the time of the project baseline
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FinishVariance">
            <summary>
            Gets the time that represents the difference between the baseline finish 
            date of the task and the current finish date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FinishVarianceTimeSpan">
            <summary>
            Gets the time interval for the variance of the finish date of the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FirstVersionReady">
            <summary>
            Дата сдачи первой версии
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FixedCost">
            <summary>
            Gets or sets any non-resource task expense
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FixedCostAccrual">
            <summary>
            Gets or sets the choices for how and when fixed costs are to be charged to the cost of a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FreeSlack">
            <summary>
            Gets the amount of time that the task can be delayed without delaying successor tasks
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.FreeSlackTimeSpan">
            <summary>
            Gets the total time interval for the amount of time that 
            the task can be delayed without delaying successor tasks
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Health">
            <summary>
            Task health
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsActive">
            <summary>
            Gets or sets a value that indicates whether a task is active
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsCritical">
            <summary>
            Gets a value that indicates whether the timing for the task is critical or 
            whether there can be any slack in the timing
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsEffortDriven">
            <summary>
            Gets or sets a value that indicates whether the scheduling of a task is effort-driven
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsExternal">
            <summary>
            Пункт плана головного исполнителя
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsExternalTask">
            <summary>
            Gets a value that indicates whether this is a ghost task from another project created 
            by Project Professional
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsHidden">
            <summary>
            Задача скрыта из представлений
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsLockedByManager">
            <summary>
            Gets or sets a value that indicates whether a task has been locked for changes by a manager
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsManual">
            <summary>
            Gets or sets a value that indicates whether a task is manually scheduled
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsMarked">
            <summary>
            Gets or sets a value that indicates whether a task has been marked as having special meaning
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsMilestone">
            <summary>
            Gets or sets a value that indicates whether a task is a milestone
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsOverAllocated">
            <summary>
            Gets a value that indicates whether the task is overallocated
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsRecurring">
            <summary>
            Gets a value that indicates whether the task is part of a recurring series
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsRecurringSummary">
            <summary>
            Gets a value that indicates whether the task is the parent of a recurring series
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsRolledUp">
            <summary>
            Gets a value that indicates whether information on the subtask 
            Gantt bars is rolled up to the summary task bar
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.IsSummary">
            <summary>
            Gets a value that indicates whether the task is a summary task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Lag">
            <summary>
            Задержка между базовым планом и текущей планируемой датой окончания
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LagReason">
            <summary>
            Причина задержки
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LastShiftConformityState">
            <summary>
            Состояние согласованности последнего сдвига даты завершения вправо
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LatestFinish">
            <summary>
            Gets the latest date that the task can finish without delaying the finish of the project
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LatestStart">
            <summary>
            Gets the latest date that the task can start without delaying the finish of the project
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LevelingAdjustsAssignments">
            <summary>
            Gets or sets a value that indicates whether leveling can delay or split assignments 
            (rather than the task itself) to resolve overallocations
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LevelingCanSplit">
            <summary>
            Gets or sets a value that indicates whether leveling can interrupt and split a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LevelingDelay">
            <summary>
            Gets or sets the amount of time that leveling can delay a task from its early start.
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.LevelingDelayTimeSpan">
            <summary>
            Gets or sets the time interval for the amount of time that leveling 
            can delay a task from its early start
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Modified">
            <summary>
            Gets the modified date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Name">
            <summary>
            Gets or sets the name of a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Notes">
            <summary>
            Заметки к задаче
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.OutlineLevel">
            <summary>
            Gets or sets the task outline level in a hierarchical task list
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.OutlinePosition">
            <summary>
            Gets the position of the task in the project outline hierarchy
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.OvertimeCost">
            <summary>
            Gets the total overtime cost for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.OvertimeWork">
            <summary>
            Gets the amount of overtime scheduled to be performed on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.OvertimeWorkTimeSpan">
            <summary>
            Gets the total time interval for the amount of overtime scheduled to be performed on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Parent">
            <summary>
            Gets the parent task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.PercentComplete">
            <summary>
            Gets or sets the percent of duration completed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.PercentPhysicalWorkComplete">
            <summary>
            Gets or sets the percentage of physical work completed on a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.PercentWorkComplete">
            <summary>
            Gets the current status of the task, expressed as the percentage of work that has been completed
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Predecessors">
            <summary>
            Gets the links to the predecessor tasks that the current task depends on
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.PreLevelingFinish">
            <summary>
            Gets the finish date of the task as it was before resource leveling was performed
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.PreLevelingStart">
            <summary>
            Gets the start date of the task as it was before resource leveling was performed
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Priority">
            <summary>
            Gets or sets the task priority
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RegularWork">
            <summary>
            Gets the total amount of non-overtime work that is scheduled to be performed on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RegularWorkTimeSpan">
            <summary>
            Gets the total time interval for the total amount of non-overtime work that is 
            scheduled to be performed on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingCost">
            <summary>
            Gets the remaining scheduled expense that will be incurred during completion 
            of the remaining scheduled work on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingDuration">
            <summary>
            Gets or sets the remaining task duration
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingDurationTimeSpan">
            <summary>
            Gets or sets the time interval for the remaining task duration
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingOvertimeCost">
            <summary>
            Gets the remaining scheduled overtime expense for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingOvertimeWork">
            <summary>
            Gets the amount of time, such as person-hours or days, that is required to complete 
            the remaining overtime work for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingOvertimeWorkTimeSpan">
            <summary>
            Gets the total time interval for the amount of time, such as person-hours or days, that is 
            required to complete the remaining overtime work for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingWork">
            <summary>
            Gets the time, such as person-hours or days, that is required to complete the task or set of tasks
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.RemainingWorkTimeSpan">
            <summary>
            Gets the total time interval for the time, such as person-hours or days, that is required to 
            complete the task or set of tasks
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Resume">
            <summary>
            Gets the date that the remaining part of the task is scheduled to resume after progress is entered
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Risk">
            <summary>
            Риск, имеющийся у задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduleCostVariance">
            <summary>
            Gets the difference in cost terms between the current progress and the baseline planned 
            progress for a resource on the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduledDuration">
            <summary>
            Gets the total span of active working time for the task as entered or as calculated based on 
            the start date, the finish date, calendars, and other scheduling factors
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduledDurationTimeSpan">
            <summary>
            Gets the time interval for the total span of active working time for the task as entered or as 
            calculated based on the start date, the finish date, calendars, and other scheduling factors
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduledFinish">
            <summary>
            Gets the date when work on the task is scheduled to be complete as it was calculated based on the 
            start date, the duration, dependencies, calendars, and other scheduling factors
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduledStart">
            <summary>
            Gets the date when work on the task is scheduled to begin as it was calculated based on dependencies, 
            constraints, calendars, and other scheduling factors
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.SchedulePerformanceIndex">
            <summary>
            Gets the ratio of the budgeted cost of work performed to the budgeted cost of work scheduled
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ScheduleVariancePercentage">
            <summary>
            Gets the ratio of schedule variance (SV) to budgeted cost of work scheduled 
            (BCWS), expressed as a percentage
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Start">
            <summary>
            ets or sets the task start date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.StartSlack">
            <summary>
            Gets the duration between the EarlyStart date and the LateStart date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.StartSlackTimeSpan">
            <summary>
            Gets the time interval for the duration between the EarlyStart date and the LateStart date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.StartVariance">
            <summary>
            Gets the time that represents the difference between a baseline start 
            date of the task and its currently scheduled start date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.StartVarianceTimeSpan">
            <summary>
            Gets the time interval for the variance of the task start date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.State">
            <summary>
            Состояние задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Stop">
            <summary>
            Gets the date that represents the end of the actual portion of the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Successors">
            <summary>
            Gets links to tasks that depend on the current task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.ToCompletePerformanceIndex">
            <summary>
            Gets the To Complete Performance Index for the task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.TotalSlack">
            <summary>
            Gets the time that the task's finish date can be delayed without delaying the project's 
            finish date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.TotalSlackTimeSpan">
            <summary>
            Gets the total time interval for the amount of time that the task finish date can be 
            delayed without delaying the project's finish date
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Traits">
            <summary>
            Признаки задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Type">
            <summary>
            Тип задачи
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.UsePercentPhysicalWorkComplete">
            <summary>
            Gets or sets a value that indicates whether to use PercentPhysicalWorkComplete 
            or PercentComplete to compute earned value
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.Work">
            <summary>
            Gets or sets the total time scheduled for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.WorkBreakdownStructure">
            <summary>
            Gets a code that identifies a location in a hierarchical structure that is used to organize 
            tasks for reporting schedules and tracking costs
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.WorkTimeSpan">
            <summary>
            Gets or sets the time interval for the total time scheduled for a task
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.WorkVariance">
            <summary>
            Gets the difference between baseline work and currently scheduled work on a task, expressed as, 
            for example, the number of person-hours or days
            </summary>
        </member>
        <member name="P:Mcst.Model.ITask.WorkVarianceTimeSpan">
            <summary>
            Gets the total time interval for the difference 
            between baseline work and currently scheduled work on the task
            </summary>
        </member>
        <member name="M:Mcst.Model.ITask.AssignTo(Mcst.Model.IEmployee)">
            <summary>
            Назначить сотрудника на задачу
            </summary>
            <param name="employee">Сотрудник</param>
            <returns>Назначение</returns>
        </member>
        <member name="M:Mcst.Model.ITask.RemoveAssignmentFrom(Mcst.Model.IEmployee)">
            <summary>
            Снимает назначение с сотрудника
            </summary>
            <param name="employee">Сотрудник</param>
        </member>
        <member name="M:Mcst.Model.ITask.LinkToSuccessor(Mcst.Model.ITask)">
            <summary>
            Связать задачу с задачей-последователем
            </summary>
            <param name="sucessor">Задача-последователь</param>
            <returns>Связь между задачами</returns>
        </member>
        <member name="M:Mcst.Model.ITask.LinkToPredecessor(Mcst.Model.ITask)">
            <summary>
            Связать задачу с задачей-предшественником
            </summary>
            <param name="predecessor">Задача-предшественник</param>
            <returns>Связь между задачами</returns>
        </member>
        <member name="M:Mcst.Model.ITask.BreakLink(Mcst.Model.ILink)">
            <summary>
            Удаляет связь задачи с предшественником или последователем
            </summary>
            <param name="link">Удаляемая связь</param>
        </member>
        <member name="T:Mcst.Model.JobState">
            <summary>
            Состояние задания
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Canceled">
            <summary>
            Задание отменено
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.CorrelationBlocked">
            <summary>
            Одно из заданий-предшественников было завершено с ошибкой, вызвавшей блокировку корреляции. Это задание не будет выполняться
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Failed">
            <summary>
            Задание завершено с ошибкой. Остальные невыполненные коррелируемые задания в очереди не будут выполнены
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.FailedNotBlocking">
            <summary>
            Задание завершено с ошибкой, не оказывающей влияния на коррелируемые задания
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.LastState">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.OnHold">
            <summary>
            Выполнение приостановлено
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Processing">
            <summary>
            Задание выполняется
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.ProcessingDeferred">
            <summary>
            Выполнение задания отложено
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.ReadyForLaunch">
            <summary>
            Задание готово к запуску
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.ReadyForProcessing">
            <summary>
            Задание готово к выполнению
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.SendIncomplete">
            <summary>
            Сообщений, отправленное службе очередей, неполное
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Sleeping">
            <summary>
            Задание находится в состоянии сна
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Success">
            <summary>
            Задание успешно выполнено
            </summary>
        </member>
        <member name="F:Mcst.Model.JobState.Unknown">
            <summary>
            Состояние задания неизвестно
            </summary>
        </member>
        <member name="T:Mcst.Model.McstVersion">
            <summary>
            Поддерживаемые версии
            </summary>
        </member>
        <member name="F:Mcst.Model.McstVersion.Public">
            <summary>
            Опубликованный версия
            </summary>
        </member>
        <member name="F:Mcst.Model.McstVersion.Draft">
            <summary>
            Черновая версия
            </summary>
        </member>
        <member name="T:Mcst.Model.NoteTypes">
            <summary>
            Типы заметок
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Custom">
            <summary>
            Прочее: заметка в неформализованном виде
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Decision">
            <summary>
            Заметка о принятом решении
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Postponement">
            <summary>
            Заметка о сдвиге задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Promise">
            <summary>
            Заметка об обещании сотрудника предоставить результат
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Recommendation">
            <summary>
            Заметка-рекоммендация
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Report">
            <summary>
            Заметка-отчет о работе
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Request">
            <summary>
            Заметка-запрос
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Simple">
            <summary>
            Обычная заметка-комментарий
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.StateOfTask">
            <summary>
            Заметка о состоянии работы
            </summary>
        </member>
        <member name="F:Mcst.Model.NoteTypes.Task">
            <summary>
            Заметка-поручение
            </summary>
        </member>
        <member name="T:Mcst.Model.OvertimeRateFormat">
            <summary>
            Период сверхурочный ставки
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Day">
            <summary>
            День
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Hour">
            <summary>
            Час
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Material">
            <summary>
            Ресурс является материалом и не имеет сверхурочных
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Minute">
            <summary>
            Минута
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Month">
            <summary>
            Месяц
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Week">
            <summary>
            Неделя
            </summary>
        </member>
        <member name="F:Mcst.Model.OvertimeRateFormat.Year">
            <summary>
            Год
            </summary>
        </member>
        <member name="T:Mcst.Model.PostponementTypes">
            <summary>
            Типы задержек
            </summary>
        </member>
        <member name="F:Mcst.Model.PostponementTypes.NotSpecified">
            <summary>
            Не указано
            </summary>
        </member>
        <member name="F:Mcst.Model.PostponementTypes.Confirmed">
            <summary>
            Сдвиг согласован
            </summary>
        </member>
        <member name="F:Mcst.Model.PostponementTypes.NotConfirmed">
            <summary>
            Сдвиг не согласован
            </summary>
        </member>
        <member name="F:Mcst.Model.PostponementTypes.Delay">
            <summary>
            Задержка
            </summary>
        </member>
        <member name="T:Mcst.Model.ProjectType">
            <summary>
            Тип проекта
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.Global">
            <summary>
            Глобальный корпоративный проект
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.InactiveGlobal">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.InactiveOffset">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.InactiveProject">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.InactiveTemplate">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.InsertedProject">
            <summary>
            Подпроект
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.LightWeightProject">
            <summary>
            Устарело. Не используйте
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.MasterProject">
            <summary>
            Мастер-проект, состоящий из нескольких подпроектов
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.MaxRequestValue">
            <summary>
            Устарело. Не используйте
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.MinRequestValue">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NewGlobal">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NewOffset">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NewProject">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NewResGlobal">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NewTemplate">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.NotSpecified">
            <summary>
            Не указан
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.Project">
            <summary>
            Стандартный проект
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.ResGlobal">
            <summary>
            Корпоративный пул ресурсов
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.Template">
            <summary>
            Шаблон, используемый для создания других проектов
            </summary>
        </member>
        <member name="F:Mcst.Model.ProjectType.TimesheetAdminProject">
            <summary>
            Административный проект расписаний
            </summary>
        </member>
        <member name="T:Mcst.Model.Rbs">
            <summary>
            Структурная декомпозиция ресурсов, определяющая положение ресурса в иерархии
            </summary>
        </member>
        <member name="M:Mcst.Model.Rbs.#ctor(System.String)">
            <summary>
            Создает объект из строкового представления СДРес
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Mcst.Model.Rbs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Mcst.Model.Rbs.Value">
            <summary>
            Строковое значение СДРес
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.IsHead">
            <summary>
            Является ли сотрудник руководителем
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.IsDirector">
            <summary>
            Является ли сотрудник Генеральным Директором
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.IsBranchHead">
            <summary>
            Является ли сотрудник руководителем отделения
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.IsDepartmentHead">
            <summary>
            Является ли сотрудник руководителем отдела
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.IsSectorHead">
            <summary>
            Является ли сотрудник руководителем сектора
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.InBranch">
            <summary>
            Принадлежит ли сотрудник какому-либо отделению
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.InDepartment">
            <summary>
            Принадлежит ли сотрудник какому-либо отделу
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.InSector">
            <summary>
            Принадлежит ли сотрудник какому-либо сектору
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.Branch">
            <summary>
            Отделение сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.Department">
            <summary>
            Отдел сотрудника
            </summary>
        </member>
        <member name="P:Mcst.Model.Rbs.Sector">
            <summary>
            Сектор сотрудника
            </summary>
        </member>
        <member name="M:Mcst.Model.Rbs.IsHeadOf(Mcst.Model.Rbs)">
            <summary>
            Является ли сотрудник с текущим значением СДРес руководителем сотрудника с указанным СДРес
            </summary>
            <param name="other">СДРес предполагаемого подчиненного</param>
            <returns>Если сотрудник с текущим СДРес действительно является руководителем сотрадника с СДРес other: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Rbs.IsSubordinateOf(Mcst.Model.Rbs)">
            <summary>
            Является ли сотрудник с текущим значением СДРес подчиненным сотрудника с указанным СДРес
            </summary>
            <param name="other">СДРес предполагаемого руководителя</param>
            <returns>Если сотрудник с текущим СДРес действительно является подчиненным сотрадника с СДРес other: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Rbs.IsUnrelatedWith(Mcst.Model.Rbs)">
            <summary>
            Проверяет что сотрудники не связаны отношениями начальник-подчиненный
            </summary>
            <param name="other">СДРес второго сотрудника</param>
            <returns>Если ни один сотрудник не является руководителем другого: true; иначе: false</returns>
        </member>
        <member name="M:Mcst.Model.Rbs.ToString">
            <summary>
            Получить строковое представление СДРес
            </summary>
            <returns>Строковое представление СДРес</returns>
        </member>
        <member name="M:Mcst.Model.Rbs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Mcst.Model.StandardRateFormat">
            <summary>
            Период обычной ставки
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Day">
            <summary>
            День
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Hour">
            <summary>
            Час
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Material">
            <summary>
            Ресурс является материальным и не мееет ставки
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Minute">
            <summary>
            Минута
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Month">
            <summary>
            Месяц
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Week">
            <summary>
            Неделя
            </summary>
        </member>
        <member name="F:Mcst.Model.StandardRateFormat.Year">
            <summary>
            Год
            </summary>
        </member>
        <member name="T:Mcst.Model.TaskHealth">
            <summary>
            Состояние задачи (встроенное поле MSP)
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.NotSpecified">
            <summary>
            Ну указано
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.OnSchedule">
            <summary>
            По графику
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.Late">
            <summary>
            Задержка
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.Early">
            <summary>
            Опережение
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.Blocked">
            <summary>
            Заблокировано
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskHealth.Completed">
            <summary>
            Завершено
            </summary>
        </member>
        <member name="T:Mcst.Model.TaskPriority">
            <summary>
            Приоритет задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P1">
            <summary>
            Низкий, 1
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P2">
            <summary>
            Низкий, 2
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P3">
            <summary>
            Низкий, 3
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P4">
            <summary>
            Низкий, 4
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P5">
            <summary>
            Нормальный, 5
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P6">
            <summary>
            Нормальный, 6
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P7">
            <summary>
            Нормальный, 7
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P8">
            <summary>
            Высокий, 8
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P9">
            <summary>
            Высокий, 9
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskPriority.P10">
            <summary>
            Высокий, 10
            </summary>
        </member>
        <member name="T:Mcst.Model.TaskState">
            <summary>
            Состояние задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.TemporarilyStopped">
            <summary>
            Временно остановлен
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.Finished">
            <summary>
            Выполнен
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.FinishedAhead">
            <summary>
            Выполнен досрочно
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.PartiallyFinished">
            <summary>
            Выполнен частично
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.ConsidiredFinished">
            <summary>
            Выполнен решением ГК
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.Undone">
            <summary>
            Не выполнен
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.Unknown">
            <summary>
            Неизвестен
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.OutOfControl">
            <summary>
            Снят с контроля
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.Attention">
            <summary>
            Обязательно обсудить
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.HighAttention">
            <summary>
            Принять решение
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.WeekControl">
            <summary>
            Еженедельный контроль
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskState.CancelledByApplicant">
            <summary>
            Отменен заявителем
            </summary>
        </member>
        <member name="T:Mcst.Model.TaskTraits">
            <summary>
            Признаки задачи. Значения берутся из таблицы подстановки. Допускается несколько значений
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.StrictDate">
            <summary>
            Несдвигаемый срок
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.MandatoryResult">
            <summary>
            Обязательный результат
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.PermanentTask">
            <summary>
            Постоянное задание
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.ConstructorTask">
            <summary>
            Задание ГК
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.DirectorTask">
            <summary>
            Задание Ген.директора
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.RiskOfStageFail">
            <summary>
            Риск срыва сдачи этапа
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskTraits.LeftShiftRequired">
            <summary>
            Требуется коррекция влево
            </summary>
        </member>
        <member name="T:Mcst.Model.TaskType">
            <summary>
            Тип задачи
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskType.Dummy">
            <summary>
            Для внутреннего использования
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskType.FixedDuration">
            <summary>
            С фиксированной длительностью
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskType.FixedUnits">
            <summary>
            С фиксированным числом назначений
            </summary>
        </member>
        <member name="F:Mcst.Model.TaskType.FixedWork">
            <summary>
            С фиксированным объемом работ
            </summary>
        </member>
        <member name="T:Mcst.Model.TrackingMode">
            <summary>
            Режим отслеживания прогресса работы наз задачей
            </summary>
        </member>
        <member name="F:Mcst.Model.TrackingMode.ActualHours">
            <summary>
            Отслеживать по фактическим и оставшимся трудозатратам
            </summary>
        </member>
        <member name="F:Mcst.Model.TrackingMode.None">
            <summary>
            Свободная форма отслеживания, при которой ресурсы могут отчитываться о ходе работ любым методом
            </summary>
        </member>
        <member name="F:Mcst.Model.TrackingMode.PercentComplete">
            <summary>
            Отслеживать по процент ее выполнения
            </summary>
        </member>
        <member name="F:Mcst.Model.TrackingMode.TimePhased">
            <summary>
            Отслеживать по часам трудозатрат за отчетный период
            </summary>
        </member>
        <member name="T:Mcst.Model.WorkFormat">
            <summary>
            Единицы объема работ
            </summary>
        </member>
        <member name="F:Mcst.Model.WorkFormat.Day">
            <summary>
            Дни
            </summary>
        </member>
        <member name="F:Mcst.Model.WorkFormat.Hour">
            <summary>
            Часы
            </summary>
        </member>
        <member name="F:Mcst.Model.WorkFormat.Minute">
            <summary>
            Минуты
            </summary>
        </member>
        <member name="F:Mcst.Model.WorkFormat.Month">
            <summary>
            Месяцы
            </summary>
        </member>
        <member name="F:Mcst.Model.WorkFormat.Week">
            <summary>
            Недели
            </summary>
        </member>
        <member name="T:Mcst.Infrastructure.IUnique">
            <summary>
            Представляет уникально идентифицируемый объект
            </summary>
        </member>
        <member name="P:Mcst.Infrastructure.IUnique.Guid">
            <summary>
            Уникальный идентификатор
            </summary>
        </member>
        <member name="T:Mcst.Json.Extentions">
            <summary>
            Методы расширения, для поддержки преобразований в формат JSON
            </summary>
        </member>
        <member name="M:Mcst.Json.Extentions.ToJson(System.Object)">
            <summary>
            Преобразует граф объектов в JSON-представление
            </summary>
            <param name="graph">Граф объектов</param>
            <returns>Строковое представление графа в формате JSON</returns>
        </member>
        <member name="M:Mcst.Json.Extentions.ToJson(System.Object,Mcst.Json.Format)">
            <summary>
            Преобразует граф объектов в JSON-представление
            </summary>
            <param name="graph">Граф объектов</param>
            <param name="format">Формат</param>
            <returns>Строковое представление графа в формате JSON</returns>
        </member>
        <member name="T:Mcst.Json.ExtentionContractResolver">
            <summary>
            Сериализует только те свойства, которые отсутствуют в базовом классе объекта или были переопределены
            </summary>
        </member>
        <member name="T:Mcst.Json.Format">
            <summary>
            Формат сериализации в Json-формат
            </summary>
        </member>
        <member name="F:Mcst.Json.Format.Full">
            <summary>
            Сериализация всех открытых свойств
            </summary>
        </member>
        <member name="F:Mcst.Json.Format.Extention">
            <summary>
            Сериализация только собственных или переопределенных свойств
            </summary>
        </member>
        <member name="T:Mcst.Json.JsonRestore">
            <summary>
            Содержит методы для десериализации из JSON
            </summary>
        </member>
        <member name="M:Mcst.Json.JsonRestore.From(System.String)">
            <summary>
            Возвращает объект анонимного типа из его JSON-представления
            </summary>
            <param name="json">Json-строка</param>
            <returns>Объект анонимного типа</returns>
        </member>
        <member name="M:Mcst.Json.JsonRestore.From(System.String,System.Type)">
            <summary>
            Возвращает объект из его JSON-представления
            </summary>
            <param name="json">Json-строка</param>
            <param name="type">Тип объекта</param>
            <returns>Объект указанного типа</returns>
        </member>
        <member name="M:Mcst.Json.JsonRestore.From``1(System.String)">
            <summary>
            Возвращает объект из его JSON-представления
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="json">Json-строка</param>
            <returns>Объект указанного типа</returns>
        </member>
        <member name="T:Mcst.Log.ILogger">
            <summary>
            Объект для ведения логов
            </summary>
        </member>
        <member name="E:Mcst.Log.ILogger.Reconfigured">
            <summary>
            Событие наступает при изменении конфигурации логов
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsDebugEnabled">
            <summary>
            Имеются ли получатели сообщений уровня DEBUG
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsErrorEnabled">
            <summary>
            Имеются ли получатели сообщений уровня ERROR
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsFatalEnabled">
            <summary>
            Имеются ли получатели сообщений уровня FATAL
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsInfoEnabled">
            <summary>
            Имеются ли получатели сообщений уровня INFO
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsTraceEnabled">
            <summary>
            Имеются ли получатели сообщений уровня TRACE
            </summary>
        </member>
        <member name="P:Mcst.Log.ILogger.IsWarnEnabled">
            <summary>
            Имеются ли получатели сообщений уровня WARN
            </summary>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.Object)">
            <summary>
            Запись объекта в журнал диагностики на уровне DEBUG с помощью метода ToString. Если активных получателей сообщений уровня DEBUG нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в журнал диагностики на уровне DEBUG. Если активных получателей сообщений уровня DEBUG нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.String)">
            <summary>
            Запись сообщения в журнал диагностики на уровне DEBUG
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в журнал диагностики на уровне DEBUG. Если активных получателей сообщений уровня DEBUG нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в диагностический журнал на уровне DEBUG с использованием указанного поставщика формата. Если активых получателей сообщений уровня DEBUG нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Запись исключения в диагностический журнал на уровне DEBUG. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня DEBUG
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в диагностический журнал на уровне DEBUG. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня DEBUG
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.Object)">
            <summary>
            Запись объекта в журнал ошибок на уровне ERROR с помощью метода ToString. Если активных получателей сообщений уровня ERROR нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в журнал ошибок на уровне ERROR. Если активных получателей сообщений уровня ERROR нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.String)">
            <summary>
            Запись сообщения в журнал ошибок на уровне ERROR
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в журнал ошибок на уровне ERROR. Если активных получателей сообщений уровня ERROR нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в журнал ошибок на уровне ERROR с использованием указанного поставщика формата. Если активых получателей сообщений уровня ERROR нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.Exception,System.String)">
            <summary>
            Запись исключения в журнал ошибок на уровне ERROR. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня DEBUG
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в журнал ошибок на уровне ERROR. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня DEBUG
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.Object)">
            <summary>
            Запись объекта в журнал ошибок на уровне FATAL с помощью метода ToString. Если активных получателей сообщений уровня FATAL нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в журнал ошибок на уровне FATAL. Если активных получателей сообщений уровня FATAL нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.String)">
            <summary>
            Запись сообщения в журнал ошибок на уровне ERROR
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в журнал ошибок на уровне FATAL. Если активных получателей сообщений уровня FATAL нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в журнал ошибок на уровне FATAL с использованием указанного поставщика формата. Если активых получателей сообщений уровня FATAL нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Запись исключения в журнал ошибок на уровне FATAL. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня FATAL
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в журнал ошибок на уровне FATAL. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня FATAL
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.Object)">
            <summary>
            Запись объекта в информационный журнал на уровне INFO с помощью метода ToString. Если активных получателей сообщений уровня INFO нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в информационный журнал на уровне INFO. Если активных получателей сообщений уровня INFO нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.String)">
            <summary>
            Запись сообщения в журнал ошибок на уровне INFO
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в информационный журнал на уровне INFO. Если активных получателей сообщений уровня INFO нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в информационный журнал на уровне INFO с использованием указанного поставщика формата. Если активых получателей сообщений уровня INFO нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.Exception,System.String)">
            <summary>
            Запись исключения в информационный журнал на уровне INFO. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня INFO
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в информационный журнал на уровне INFO. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня INFO
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.Object)">
            <summary>
            Запись объекта в журнал диагностики на уровне TRACE с помощью метода ToString. Если активных получателей сообщений уровня TRACE нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в журнал диагностики на уровне TRACE. Если активных получателей сообщений уровня TRACE нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.String)">
            <summary>
            Запись сообщения в журнал диагностики на уровне TRACE
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в журнал диагностики на уровне TRACE. Если активных получателей сообщений уровня TRACE нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в диагностический журнал на уровне TRACE с использованием указанного поставщика формата. Если активых получателей сообщений уровня TRACE нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.Exception,System.String)">
            <summary>
            Запись исключения в диагностический журнал на уровне TRACE. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня TRACE
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в диагностический журнал на уровне TRACE. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня TRACE
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.Object)">
            <summary>
            Запись объекта в информационный журнал на уровне WARN с помощью метода ToString. Если активных получателей сообщений уровня WARN нет, этот метод не будет вызван
            </summary>
            <param name="value">Диагностируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.Func{System.String})">
            <summary>
            Запись результата работы генератора сообщения в информационный журнал на уровне WARN. Если активных получателей сообщений уровня WARN нет, функция не вызывается
            </summary>
            <param name="messageFunc">Генератор сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.String)">
            <summary>
            Запись сообщения в журнал ошибок на уровне WARN
            </summary>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Запись параметризованного сообщения в информационный журнал на уровне WARN. Если активных получателей сообщений уровня WARN нет, форматирование сообщения не выполняется
            </summary>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Запись объекта в информационный журнал на уровне WARN с использованием указанного поставщика формата. Если активых получателей сообщений уровня WARN нет, форматирование не выполняется
            </summary>
            <param name="formatProvider">Поставщик данных о форматировании</param>
            <param name="value">Логгируемый объект</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.Exception,System.String)">
            <summary>
            Запись исключения в информационный журнал на уровне WARN. Форматирование исключения не выполняется, если нет активных получателей сообщений уровня WARN
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Сообщение</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Запись исключения в информационный журнал на уровне WARN. Форматирование исключения и сообщения не выполняется, если нет активных получателей сообщений уровня WARN
            </summary>
            <param name="exception">Логгируемое исключение</param>
            <param name="message">Формат сообщения</param>
            <param name="args">Аргументы сообщения</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Swallow(System.Action)">
            <summary>
            Выполняет действие, перехватывая возникшее исключение. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется выше по стеку вызовов
            </summary>
            <param name="action">Выполняемое действие</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Swallow(System.Threading.Tasks.Task)">
            <summary>
            После завершения задачи заносит в журнал возникшее исключение. Не блокирует выполнение и не распространяет исключение выше по стеку вызовов.
            </summary>
            <param name="task">Задача</param>
        </member>
        <member name="M:Mcst.Log.ILogger.Swallow``1(System.Func{``0})">
            <summary>
            Вычисляет значение функции, перехватывая возникшее исключение. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется выше по стеку вызовов. Вместо исключения возвращает значение по-умолчанию
            </summary>
            <typeparam name="T">Тип возвращаемого значения</typeparam>
            <param name="func">Функция, возвращающее значение</param>
            <returns>Значение функции</returns>
        </member>
        <member name="M:Mcst.Log.ILogger.Swallow``1(System.Func{``0},``0)">
            <summary>
            Вычисляет значение функции, перехватывая возникшее исключение. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется выше по стеку вызовов. Вместо исключения возвращает предоставленное значение
            </summary>
            <typeparam name="T">Тип возвращаемого значения</typeparam>
            <param name="func">Функция, возвращающее значение</param>
            <param name="fallback">Значение, возвращаемое при исключении</param>
            <returns>Значение функции</returns>
        </member>
        <member name="M:Mcst.Log.ILogger.SwallowAsync(System.Threading.Tasks.Task)">
            <summary>
            Возвращает задачу, которая выполяется сразу после выполнения указанной задачи. Возникшее исключение заносится в журнал исключений на уровне ERROR
            </summary>
            <param name="task">Задача</param>
            <returns>Связанная задача</returns>
        </member>
        <member name="M:Mcst.Log.ILogger.SwallowAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Возвращает задачу, которая завершается сразу после завершения вычисления асинхронного действия. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется за пределы этого метода
            </summary>
            <param name="asyncAction">Асинхронное действие</param>
            <returns>Задача, связанная с выполнением действия</returns>
        </member>
        <member name="M:Mcst.Log.ILogger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Возвращает задачу, которая завершается сразу после завершения вычисления асинхронной функции. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется за пределы этого метода. При исключении возвращается значение по-умолчанию
            </summary>
            <typeparam name="TResult">Тип значения асинхронной функции</typeparam>
            <param name="asyncFunc">Асинхрнная функция</param>
            <returns>Задача, связанная с вычислением асинхронной функции</returns>
        </member>
        <member name="M:Mcst.Log.ILogger.SwallowAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Возвращает задачу, которая завершается сразу после завершения вычисления асинхронной функции. Возникшее исключение заносится в журнал на уровне ERROR и не распространяется за пределы этого метода. При исключении возвращается предоставленное значение
            </summary>
            <typeparam name="TResult">Тип значения асинхронной функции</typeparam>
            <param name="asyncFunc">Асинхрнная функция</param>
            <param name="fallback">Значение, используемое при исключении</param>
            <returns>Задача, связанная с вычислением асинхронной функции</returns>
        </member>
        <member name="T:Mcst.McstContext">
            <summary>
            Контекст АСУП МЦСТ
            </summary>
        </member>
        <member name="P:Mcst.McstContext.Current">
            <summary>
            Текущий контекст АСУП МЦСТ
            </summary>
        </member>
        <member name="T:Mcst.Types.McstTypeExtensions">
            <summary>
            Расширения класса Type
            </summary>
        </member>
        <member name="M:Mcst.Types.McstTypeExtensions.IsBuiltIn(System.Type)">
            <summary>
            Првоеряет является ли тип встроенным
            </summary>
            <param name="type">Целевой тип</param>
            <returns>Тип встроенный: true, иначе: false</returns>
        </member>
        <member name="T:Mcst.Validation.Argument`1">
            <summary>
            Представляет аргумент, являющийся целью для проверки
            </summary>
            <typeparam name="TargetT">Тип аргумента</typeparam>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Value">
            <summary>
            Значение аргумента
            </summary>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Name">
            <summary>
            Имя аргумента
            </summary>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Options">
            <summary>
            Параметры проверки
            </summary>
        </member>
        <member name="M:Mcst.Validation.Argument`1.Constrained(Mcst.Validation.IConstraint{`0}[])">
            <summary>
            Накладывает последовательность ограничений на значение аргумента
            </summary>
            <param name="constraints">Набор ограничений</param>
            <returns>Аргумент с наложенными на него ограничениями</returns>
        </member>
        <member name="P:Mcst.Validation.Argument`1.All">
            <summary>
            Проверять все ограничения, даже если одно из них нарушено. Если встречается жесткое ограничение, проверка, тем не менее, останавливается
            </summary>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Any">
            <summary>
            Остановить проверку после первого нарушения ограничения
            </summary>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Close">
            <summary>
            Значение аргумента не включается в исключение
            </summary>
        </member>
        <member name="P:Mcst.Validation.Argument`1.Open">
            <summary>
            Значение аргумента включается в исключение
            </summary>
        </member>
        <member name="M:Mcst.Validation.Argument`1.ToString">
            <summary>
            Преобразует аргумент в строковое представление
            </summary>
            <returns>Строковое представление аргумента</returns>
        </member>
        <member name="T:Mcst.Validation.Argument">
            <summary>
            Точка входа в библиотеку валидации
            </summary>
        </member>
        <member name="M:Mcst.Validation.Argument.Value``1(``0,System.String)">
            <summary>
            Подготовка к валидации значения аргумента
            </summary>
            <typeparam name="TargetT">Тип аргумента</typeparam>
            <param name="value">Значение аргумента</param>
            <param name="name">Имя аргумента (искользуется в исключениях валидации)</param>
            <returns>Готовый для задания ограничений аргумент</returns>
        </member>
        <member name="M:Mcst.Validation.Argument.Value``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Подготовка к валидации значения аргумента
            </summary>
            <typeparam name="TargetT">Тип аргумента</typeparam>
            <param name="valueExpression">Выражение, состоящее из возврата переменной аргумента</param>
            <returns>Готовый для задания ограничений аргумент</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Mcst.Validation.Argument.NotNull``1(``0,System.String)">
            <summary>
            Пропускает аргумент ссылочного типа на выход, проверяя его на пустое значение
            </summary>
            <typeparam name="TValue">Ссылочный тип аргумента</typeparam>
            <param name="value">Значение аргумента</param>
            <param name="name">Имя аргумента</param>
            <returns>Значение аргумента</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Mcst.Validation.Argument.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Пропускает аргумент типа Nullable на выход, проверяя его на наличие значения
            </summary>
            <typeparam name="TValue">Ссылочный тип аргумента</typeparam>
            <param name="value">Значение аргумента</param>
            <param name="name">Имя аргумента</param>
            <returns>Значение аргумента</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Mcst.Validation.Argument.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Пропускает аргумент ссылочного типа на выход, проверяя его на пустое значение
            </summary>
            <typeparam name="TValue">Ссылочный тип аргумента</typeparam>
            <param name="valueExpression">Выражение, состоящее из возврата переменной аргумента</param>
            <returns>Значение аргумента</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Mcst.Validation.Argument.NotNull``1(System.Linq.Expressions.Expression{System.Func{System.Nullable{``0}}})">
            <summary>
            Пропускает аргумент типа Nullable на выход, проверяя его на наличие значения
            </summary>
            <typeparam name="TValue">Ссылочный тип аргумента</typeparam>
            <param name="valueExpression">Выражение, состоящее из возврата переменной аргумента</param>
            <returns>Значение аргумента</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:Mcst.Validation.As">
            <summary>
            Набор доступных ограничений
            </summary>
        </member>
        <member name="P:Mcst.Validation.As.NotNull">
            <summary>
            Аргумент не является пустой ссылкой. Жесткое ограничение
            </summary>
        </member>
        <member name="M:Mcst.Validation.As.HasValue``1">
            <summary>
            Аргумент не является пустой ссылкой. Жесткое ограничение
            </summary>
        </member>
        <member name="P:Mcst.Validation.As.HasChars">
            <summary>
            В строке присутствует хотя бы 1 символ (строка не null и не пуста)
            </summary>
        </member>
        <member name="M:Mcst.Validation.As.MathchRegExp(System.String)">
            <summary>
            Аргумент соответствует регулярному выражению
            </summary>
            <param name="pattern">Регулярное выражение</param>
            <returns>Ограничение</returns>
        </member>
        <member name="P:Mcst.Validation.As.Interface">
            <summary>
            Тип является интерфейсом
            </summary>
        </member>
        <member name="M:Mcst.Validation.As.ImplementationOf``1">
            <summary>
            Объект реализует инетрфейс
            </summary>
            <typeparam name="InterfaceT">Требуемый интерфейс</typeparam>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.OfType``1">
            <summary>
            Тип аргумента в точности равен указанному типу
            </summary>
            <typeparam name="T">Требуемый тип</typeparam>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.ConvertibleTo``1">
            <summary>
            Может быть преобразован в указанный тип
            </summary>
            <typeparam name="TargetT">Требуемый тип</typeparam>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.ConvertibleTo(System.Type)">
            <summary>
            Может быть преобразован в указанный тип
            </summary>
            <param name="targetType">Требуемый тип</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.ExistsIn``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Присутствует ли значение в последовательности
            </summary>
            <typeparam name="TValue">Тип аргумента</typeparam>
            <param name="sequence">Последовательность</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.ExistsIn``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Присутствует ли значение в последовательности
            </summary>
            <typeparam name="TValue">Тип аргумента</typeparam>
            <param name="sequence">Последовательность</param>
            <param name="comparer">Предикат, используемый для проверки на равенство</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.ValidKeyOf``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Значения является корректным ключем в указанном словаре
            </summary>
            <typeparam name="ArgumentT">Тип аргумента</typeparam>
            <typeparam name="ValueT">Тип значения словаря</typeparam>
            <param name="dictionary">Словарь</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.GT``1(``0)">
            <summary>
            Значение превышает указанное
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="other">Указанное значение</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.LT``1(``0)">
            <summary>
            Значение меньше указанного
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="other">Указанное значение</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.Positive``1">
            <summary>
            Значение является строго положительным
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.InRange``1(``0,``0)">
            <summary>
            Значение входит в диапазон [first, second)
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="first">Нижняя включенная граница диапазона</param>
            <param name="second">Верхняя исключенная граница диапазона</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.Index``1(``0)">
            <summary>
            Значение является правильным индексом
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="length">Число индексируемых элементов</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.All``1(Mcst.Validation.IConstraint{``0})">
            <summary>
            Все элементы перечисления удовлетворяют указанному ограничению
            </summary>
            <typeparam name="TElem">Тип элемента перечисления</typeparam>
            <param name="elementConstraint">Ограничение на элементы перечисления</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.Not``1(Mcst.Validation.IConstraint{``0})">
            <summary>
            Инвертирует указанное ограничение
            </summary>
            <typeparam name="TTarget">Тип аргумента</typeparam>
            <param name="constraint">Инвертируемое ограничение</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.Holding``1(System.Func{``0,System.Boolean})">
            <summary>
            Проверяет выполнение предиката на значении аргумента
            </summary>
            <typeparam name="TValue">Тип аргумента</typeparam>
            <param name="predicate">Предикат</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.LengthsMatch``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Размер последовательности совпадает с размером другой последовательности
            </summary>
            <typeparam name="TElem1">Тип элементов првоеряемой последовательности</typeparam>
            <typeparam name="TElem2">Тип элементов последовательности, используемой для проверки</typeparam>
            <param name="otherSequence">Последовательность, используемая для проверки</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.EqualsTo``1(``0)">
            <summary>
            Аргумент имеет указанное значение
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="value">Значение</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.EqualsTo``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Аргумент имеет указанное значение
            </summary>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="value">Значение</param>
            <param name="comparer">Компаратор</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.SameAs(System.Object)">
            <summary>
            Значение аргумента представляет собой ожидаемый объект
            </summary>
            <param name="expected">Ожидаемый объект</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.HavingProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},Mcst.Validation.IConstraint{``1}[])">
            <summary>
            Значение аргумента имеет свойство, на которое наложены указанные ограничения
            </summary>
            <typeparam name="TObject">Тип аргумента</typeparam>
            <typeparam name="TValue">Тип свойства аргумента</typeparam>
            <param name="propertyRetreival">Выражение-селектор свойства</param>
            <param name="propertyConstraints">Ограничения, наложенные на свойство</param>
            <returns>Ограничение</returns>
        </member>
        <member name="M:Mcst.Validation.As.Default``1">
            <summary>
            Значение является значением по-умолчанию
            </summary>
            <typeparam name="TValue">Тип аргумента</typeparam>
            <returns>Ограничение</returns>
        </member>
        <member name="T:Mcst.Validation.ConstrainedArgument`1">
            <summary>
            Аргумент с наложенными на него ограничениями
            </summary>
            <typeparam name="TargetT">Тип аргумента</typeparam>
        </member>
        <member name="P:Mcst.Validation.ConstrainedArgument`1.IsWellFormed">
            <summary>
            Удовлетворяет ли аргумент всем ограничениям
            </summary>
        </member>
        <member name="M:Mcst.Validation.ConstrainedArgument`1.Ensure">
            <summary>
            Запуск проверки и генерация исключений в случае нарушения ограничений
            </summary>
        </member>
        <member name="T:Mcst.Validation.IConstraint`1">
            <summary>
            Ограничение на значение
            </summary>
            <typeparam name="TargetT"></typeparam>
        </member>
        <member name="M:Mcst.Validation.IConstraint`1.Violated(`0)">
            <summary>
            Проверка ограничения
            </summary>
            <param name="value">Значение аргумента</param>
            <returns>ограничение соблюдено: true; в противном случае: false</returns>
        </member>
        <member name="P:Mcst.Validation.IConstraint`1.Soft">
            <summary>
            Указывает что ограничение является мягким - при его нарушении возможна дальнейшая проверка аргумента
            </summary>
        </member>
        <member name="P:Mcst.Validation.IConstraint`1.Hard">
            <summary>
            Указывает что ограничение является жестким - при его нарушении дальнейшая проверка аргумента невозможна
            </summary>
        </member>
        <member name="P:Mcst.Validation.IConstraint`1.IsHard">
            <summary>
            Является ли ограничение жестким
            </summary>
        </member>
        <member name="T:Mcst.Xml.McstXmlExtensions">
            <summary>
            Расширения для преобразование в XML
            </summary>
        </member>
        <member name="M:Mcst.Xml.McstXmlExtensions.ToXml``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Преобразует объект в XML элемент
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="target">Целевой объект</param>
            <param name="name">Имя элемента</param>
            <param name="selectors">Селекторы свойств объекта</param>
            <returns>XML-элемент</returns>
        </member>
        <member name="M:Mcst.Xml.McstXmlExtensions.ToXml(System.DateTime,System.String)">
            <summary>
            Преобразует объект даты/времени в XML-элемент
            </summary>
            <param name="target">Целевой объект</param>
            <param name="name">Имя элемента</param>
            <returns>XML-элемент</returns>
        </member>
    </members>
</doc>
